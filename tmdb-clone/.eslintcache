[{"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx":"1","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx":"2","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserFavoritesPage\\UserFavoritesPage.tsx":"3","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx":"4","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx":"5","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx":"6","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx":"7","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts":"8","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\index.ts":"9","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts":"10","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserWatchlistPage\\index.ts":"11","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserRatingsPage\\index.ts":"12","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AccountService.ts":"13","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts":"14","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts":"15","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\SearchService.ts":"16","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts":"17","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Preloader\\Preloader.tsx":"18","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts":"19","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\ProfileMoviesCard\\ProfileMoviesCard.tsx":"20","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\common\\utils.ts":"21","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx":"22","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\PopularPeoplePage.tsx":"23","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserWatchlistPage\\UserWatchlistPage.tsx":"24","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx":"25","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserRatingsPage\\UserRatingsPage.tsx":"26","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts":"27","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PopularPeopleService.ts":"28","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts":"29","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx":"30","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx":"31","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx":"32","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts":"33","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts":"34","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts":"35","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts":"36","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts":"37","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx":"38","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\NotFound\\index.js":"39","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\NotFound\\NotFound.jsx":"40"},{"size":184,"mtime":1612286095799,"results":"41","hashOfConfig":"42"},{"size":1639,"mtime":1612286095709,"results":"43","hashOfConfig":"42"},{"size":2067,"mtime":1612286095788,"results":"44","hashOfConfig":"42"},{"size":22315,"mtime":1614965526194,"results":"45","hashOfConfig":"42"},{"size":9820,"mtime":1614549353743,"results":"46","hashOfConfig":"42"},{"size":3677,"mtime":1614548974521,"results":"47","hashOfConfig":"42"},{"size":22514,"mtime":1614545810517,"results":"48","hashOfConfig":"42"},{"size":44,"mtime":1612286076618,"results":"49","hashOfConfig":"42"},{"size":47,"mtime":1612286095786,"results":"50","hashOfConfig":"42"},{"size":36,"mtime":1612286095749,"results":"51","hashOfConfig":"42"},{"size":47,"mtime":1612286076653,"results":"52","hashOfConfig":"42"},{"size":45,"mtime":1612286076647,"results":"53","hashOfConfig":"42"},{"size":3350,"mtime":1612286095835,"results":"54","hashOfConfig":"42"},{"size":4610,"mtime":1614547226642,"results":"55","hashOfConfig":"42"},{"size":4364,"mtime":1612286095836,"results":"56","hashOfConfig":"42"},{"size":1251,"mtime":1612286095849,"results":"57","hashOfConfig":"42"},{"size":1060,"mtime":1612286095736,"results":"58","hashOfConfig":"42"},{"size":239,"mtime":1612286095726,"results":"59","hashOfConfig":"42"},{"size":6003,"mtime":1614543523986,"results":"60","hashOfConfig":"42"},{"size":2082,"mtime":1612286095731,"results":"61","hashOfConfig":"42"},{"size":835,"mtime":1612286095711,"results":"62","hashOfConfig":"42"},{"size":3744,"mtime":1612286095769,"results":"63","hashOfConfig":"42"},{"size":3239,"mtime":1612286095784,"results":"64","hashOfConfig":"42"},{"size":2067,"mtime":1612286095797,"results":"65","hashOfConfig":"42"},{"size":2528,"mtime":1614550113925,"results":"66","hashOfConfig":"42"},{"size":1995,"mtime":1612286095795,"results":"67","hashOfConfig":"42"},{"size":399,"mtime":1612286095851,"results":"68","hashOfConfig":"42"},{"size":1183,"mtime":1612286095846,"results":"69","hashOfConfig":"42"},{"size":2208,"mtime":1612286095838,"results":"70","hashOfConfig":"42"},{"size":12831,"mtime":1612286095774,"results":"71","hashOfConfig":"42"},{"size":797,"mtime":1612286095771,"results":"72","hashOfConfig":"42"},{"size":535,"mtime":1612286095765,"results":"73","hashOfConfig":"42"},{"size":26114,"mtime":1612286095745,"results":"74","hashOfConfig":"42"},{"size":31547,"mtime":1612286095739,"results":"75","hashOfConfig":"42"},{"size":1020,"mtime":1612286095741,"results":"76","hashOfConfig":"42"},{"size":143,"mtime":1612286095830,"results":"77","hashOfConfig":"42"},{"size":27756,"mtime":1612286095734,"results":"78","hashOfConfig":"42"},{"size":1569,"mtime":1612286095760,"results":"79","hashOfConfig":"42"},{"size":39,"mtime":1612286095723,"results":"80","hashOfConfig":"42"},{"size":483,"mtime":1612286095721,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1gwa2ur",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx",[],["166","167","168","169","170","171","172","173"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserFavoritesPage\\UserFavoritesPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx",["174"],"import React, { Component } from 'react';\r\nimport {\r\n  Icon, Button, Embed, Modal, Popup, Rating, RatingProps,\r\n} from 'semantic-ui-react';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport MovieDetailsService from '../../services/MovieDetailsService';\r\nimport { MovieDetailsViewModel } from '../../models/MovieDetails/ViewModels/MovieDetailsViewModel';\r\nimport './movieDetails.css';\r\nimport defaultPerson from '../../assets/img/defaultPerson.svg';\r\nimport defaultMovie from '../../assets/img/glyphicons-basic-38-picture-grey.svg';\r\nimport AccountService from '../../services/AccountService';\r\nimport AuthenticationService from '../../services/AuthenticationService';\r\nimport { posterUrl } from '../../configuration/configuration';\r\nimport Preloader from '../../components/Preloader/Preloader';\r\nimport getRatingColor, { fallbackImage, getFullLanguage } from '../../common/utils';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst ColorThief = require('colorthief').default;\r\n\r\ntype MovieDetailsProps = {\r\n  id: string\r\n};\r\n\r\ntype MovieDetailsState = {\r\n  model: MovieDetailsViewModel;\r\n  loading: boolean;\r\n  ratedMovie?: RatingViewModel | null;\r\n  watchListMovie?: RatingViewModel | null;\r\n  watchListActive: boolean;\r\n  favoriteActive: boolean;\r\n  favoriteMovie?: RatingViewModel | null;\r\n  filterColor: string;\r\n};\r\n\r\ntype RatingViewModel = {\r\n  movieId: number;\r\n  rating?: number;\r\n};\r\n\r\nclass MovieDetails extends Component<RouteComponentProps<MovieDetailsProps>, MovieDetailsState> {\r\n  movieDetailsService: MovieDetailsService;\r\n\r\n  accountService: AccountService;\r\n\r\n  authenticationService: AuthenticationService;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  colorThief: any;\r\n\r\n  id: string;\r\n\r\n  constructor(props: RouteComponentProps<MovieDetailsProps>) {\r\n    super(props);\r\n    this.id = props.match.params.id;\r\n    this.movieDetailsService = new MovieDetailsService();\r\n    this.accountService = new AccountService();\r\n    this.authenticationService = new AuthenticationService();\r\n    this.colorThief = new ColorThief();\r\n    this.state = {\r\n      model: {\r\n        vote_average: 0,\r\n      },\r\n      loading: true,\r\n      watchListActive: false,\r\n      favoriteActive: false,\r\n      filterColor: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.updatePage(this.id);\r\n  };\r\n\r\n  async componentDidUpdate(prevProps: RouteComponentProps<MovieDetailsProps>) {\r\n    if (this.props.match.params.id !== prevProps.match.params.id) {\r\n      await this.updatePage(this.props.match.params.id);\r\n    }\r\n  }\r\n\r\n  getPosterUrl = (url: string): string | null => {\r\n    if (!url) {\r\n      return null;\r\n    } if (!url.includes('http')) {\r\n      return `${posterUrl}/w154${url}`;\r\n    }\r\n    return url;\r\n  };\r\n\r\n  getUserImageUrl = (url: string): string | null => {\r\n    if (!url) {\r\n      return null;\r\n    } if (url.includes('tmdb')) {\r\n      return url;\r\n    } if (url.includes('gravatar')) {\r\n      return url.slice(1);\r\n    }\r\n    return `${posterUrl}/w185${url}`;\r\n  };\r\n\r\n  private async getMyMovieRating(movie: MovieDetailsViewModel) {\r\n    const account = this.authenticationService.getCurrentAccountDetails();\r\n    let ratedMovie: RatingViewModel | null = null;\r\n    if (AuthenticationService.isAuthenticated() && account) {\r\n      const ratingResponse = await this.accountService.getRatings(account.id);\r\n      const foundMovie = ratingResponse.find((item) => item.id === movie.id);\r\n      if (foundMovie) {\r\n        ratedMovie = {\r\n          movieId: foundMovie.id,\r\n          rating: foundMovie.rating,\r\n        };\r\n      }\r\n    }\r\n    return ratedMovie;\r\n  }\r\n\r\n  private async setMyMovieWatchList(movie: MovieDetailsViewModel) {\r\n    const account = this.authenticationService.getCurrentAccountDetails();\r\n    if (AuthenticationService.isAuthenticated() && account) {\r\n      const watchListResponse = await this.accountService.getWatchList(account.id);\r\n      const foundMovie = watchListResponse.find((item) => item.id === movie.id);\r\n      if (foundMovie) {\r\n        this.setState({\r\n          watchListActive: true,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private async setMyMovieFavorite(movie: MovieDetailsViewModel) {\r\n    const account = this.authenticationService.getCurrentAccountDetails();\r\n    if (AuthenticationService.isAuthenticated() && account) {\r\n      const favoriteResponse = await this.accountService.getFavorites(account.id);\r\n      const foundMovie = favoriteResponse.find((item) => item.id === movie.id);\r\n      if (foundMovie) {\r\n        this.setState({\r\n          favoriteActive: true,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleToFavoriteClicked = () => {\r\n    const favoriteActive = !this.state.favoriteActive;\r\n    this.setState({\r\n      favoriteActive,\r\n    });\r\n    const accountId = this.authenticationService.getCurrentAccountDetails()?.id;\r\n    if (accountId) {\r\n      this.accountService.addOrRemoveToFavorites(accountId, +this.id, favoriteActive);\r\n    }\r\n  };\r\n\r\n  private handleToWatchListClicked = () => {\r\n    const watchListActive = !this.state.watchListActive;\r\n    this.setState({\r\n      watchListActive,\r\n    });\r\n    const accountId = this.authenticationService.getCurrentAccountDetails()?.id;\r\n    if (accountId) {\r\n      this.accountService.addOrRemoveToWatchList(accountId, +this.id, watchListActive);\r\n    }\r\n  };\r\n\r\n  private handleRatingMovieClicked = (event: React.MouseEvent<HTMLDivElement>,\r\n    data: RatingProps) => {\r\n    if (data.rating) {\r\n      this.accountService.rateMovie(this.id, data.rating as number);\r\n    }\r\n  };\r\n\r\n  private updatePage = async (id: string) => {\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    const movie = await this.movieDetailsService.getMovie(id);\r\n    await this.setMyMovieWatchList(movie);\r\n    await this.setMyMovieFavorite(movie);\r\n    const ratedMovie: RatingViewModel | null = await this.getMyMovieRating(movie);\r\n\r\n    this.setState({\r\n      ratedMovie,\r\n      model: movie,\r\n      loading: false,\r\n    });\r\n\r\n    if (movie.poster_path) {\r\n      this.getPrimaryColor(`${posterUrl}/w342${movie.poster_path}`, (color: number[]) => {\r\n        this.setState({\r\n          filterColor: color.join(','),\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line @typescript-eslint/ban-types\r\n  private getPrimaryColor = (imageUrl: string, callback: Function): void => {\r\n    const img = document.createElement('img');\r\n    img.src = imageUrl;\r\n    img.crossOrigin = 'Anonymous';\r\n    img.addEventListener('load', () => {\r\n      const result = this.colorThief.getColor(img);\r\n      callback(result);\r\n    });\r\n  };\r\n\r\n  private getPopupContent = (active: boolean): string => {\r\n    let result = '';\r\n    if (!AuthenticationService.isAuthenticated()) {\r\n      result = 'Login to add this movie to your list';\r\n    } else if (active) {\r\n      result = 'Successfully added';\r\n    } else {\r\n      result = 'Successfully removed';\r\n    }\r\n    return result;\r\n  };\r\n\r\n  private getTextColor = (rgbNumbers: string): any => {\r\n    const rgbArray = rgbNumbers.split(',');\r\n    if (rgbArray) {\r\n      if (+rgbArray[0] > 180 || +rgbArray[1] > 180 || +rgbArray[2] > 180) {\r\n        return '#000';\r\n      }\r\n    }\r\n    return '#fff';\r\n  };\r\n\r\n  render = () => {\r\n    const dateFormatter = new Intl.DateTimeFormat('ru');\r\n    const moneyFormatter = new Intl.NumberFormat('en', {\r\n      maximumSignificantDigits: 3,\r\n    });\r\n\r\n    if (this.state.loading === true) {\r\n      return (<Preloader />);\r\n    }\r\n\r\n    return (\r\n      <div className=\"movieDetails-container\">\r\n        <div\r\n          className=\"movie-bg\"\r\n          style={{\r\n            background: this.state.model.backdrop_path\r\n              ? `url(${posterUrl}/original${this.state.model.backdrop_path})` : 'grey',\r\n          }}\r\n        >\r\n          <div\r\n            className=\"movie-bg__filter\"\r\n            style={{\r\n              backgroundImage: `linear-gradient(to right, rgba(${this.state.filterColor}, 1.00),\r\n                rgba(${this.state.filterColor},0.84) 100%`,\r\n              color: this.getTextColor(this.state.filterColor),\r\n            }}\r\n          >\r\n            <div className=\"movie_poster__column\">\r\n              <img\r\n                src={`${posterUrl}/w342${this.state.model.poster_path}`}\r\n                alt=\"movie poster\"\r\n                className=\"movie-poster\"\r\n                onError={(e) => fallbackImage(e, defaultPerson)}\r\n              />\r\n            </div>\r\n            <div className=\"movie_inform__column\">\r\n              <h2 className=\"movie-title\">\r\n                {this.state.model.title}\r\n                <span className=\"movie-year\">{this.state.model.release_date ? ` (${this.state.model.release_date?.substr(0, 4)})` : ''}</span>\r\n                <a href={`https://www.imdb.com/title/${this.state.model.imdb_id}`}>\r\n                  <Icon name=\"imdb\" link size=\"small\" />\r\n                </a>\r\n                <div className=\"facts\">\r\n                  <span className=\"release-date\">\r\n                    {this.state.model.release_date ? dateFormatter.format(new Date(this.state.model.release_date)) : ''}\r\n                  </span>\r\n                  <span>\r\n                    {this.state.model.genres?.map((genre) => (\r\n                      <span key={genre.id}>\r\n                        <Icon color=\"red\" name=\"circle outline\" size=\"small\" />\r\n                        {genre.name}\r\n                      </span>\r\n                    ))}\r\n                  </span>\r\n                  <span>\r\n                    <Icon color=\"red\" name=\"circle outline\" size=\"small\" />\r\n                    {this.state.model.runtime ? `${this.state.model.runtime} min` : ''}\r\n                  </span>\r\n                </div>\r\n              </h2>\r\n\r\n              <div className=\"actions\">\r\n                <div className=\"movie_inform-vote\">\r\n                  <div className=\"user-score\">\r\n                    <div\r\n                      className=\"movie_inform-voting\"\r\n                      style={{\r\n                        borderColor: getRatingColor(this.state.model.vote_average),\r\n                      }}\r\n                    >\r\n                      {this.state.model.vote_average !== 0 ? `${this.state.model.vote_average * 10}%` : 'NR'}\r\n                    </div>\r\n                    <span>\r\n                      User\r\n                      <br />\r\n                      {' '}\r\n                      Score\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"movie_inform-buttons\">\r\n                    <Popup\r\n                      on=\"click\"\r\n                      position=\"bottom center\"\r\n                      pinned\r\n                      trigger={(\r\n                        <Button\r\n                          color=\"red\"\r\n                          circular\r\n                          icon={this.state.favoriteActive && AuthenticationService.isAuthenticated() ? 'heart' : 'heart outline'}\r\n                          toggle={!!AuthenticationService.isAuthenticated()}\r\n                          active={!!this.state.favoriteActive}\r\n                          onClick={this.handleToFavoriteClicked}\r\n                          size=\"large\"\r\n                          className=\"movie_inform-like\"\r\n                        />\r\n                      )}\r\n                    >\r\n                      <Popup.Content>\r\n                        {this.getPopupContent(this.state.favoriteActive)}\r\n                      </Popup.Content>\r\n                    </Popup>\r\n                    <Popup\r\n                      on=\"click\"\r\n                      position=\"bottom center\"\r\n                      pinned\r\n                      trigger={(\r\n                        <Button\r\n                          toggle={!!AuthenticationService.isAuthenticated()}\r\n                          active={!!this.state.watchListActive}\r\n                          color=\"blue\"\r\n                          circular\r\n                          icon={this.state.watchListActive && AuthenticationService.isAuthenticated() ? 'bookmark' : 'bookmark outline'}\r\n                          onClick={this.handleToWatchListClicked}\r\n                          size=\"large\"\r\n                          className=\"movie_inform-mark\"\r\n                        />\r\n                      )}\r\n                    >\r\n                      <Popup.Content>\r\n                        {this.getPopupContent(this.state.watchListActive)}\r\n                      </Popup.Content>\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                      on=\"click\"\r\n                      position=\"bottom center\"\r\n                      pinned\r\n                      trigger={(\r\n                        <Button\r\n                          color=\"yellow\"\r\n                          circular\r\n                          icon=\"star\"\r\n                          size=\"large\"\r\n                          className=\"movie_inform-star\"\r\n                        />\r\n                      )}\r\n                    >\r\n                      <Popup.Content>\r\n                        {AuthenticationService.isAuthenticated()\r\n                          ? (\r\n                            <Rating\r\n                              onRate={this.handleRatingMovieClicked}\r\n                              icon=\"star\"\r\n                              defaultRating={this.state.ratedMovie?.rating}\r\n                              maxRating={10}\r\n                            />\r\n                          ) : 'Login to rate this movie'}\r\n                      </Popup.Content>\r\n                    </Popup>\r\n                  </div>\r\n                  {this.state.model.videos?.results[0]\r\n                    ? (\r\n                      <Modal\r\n                        closeIcon\r\n                        trigger={(\r\n                          <Button className=\"movie_inform-youtube\" compact color=\"youtube\">\r\n                            <Icon name=\"youtube play\" />\r\n                            Play trailer\r\n                          </Button>\r\n                        )}\r\n                      >\r\n                        <Modal.Content>\r\n                          <Embed\r\n                            key={this.state.model.videos?.results[0].id}\r\n                            id={this.state.model.videos?.results[0].key}\r\n                            placeholder={`${posterUrl}/original${this.state.model.backdrop_path}`}\r\n                            source=\"youtube\"\r\n                          />\r\n                        </Modal.Content>\r\n                      </Modal>\r\n                    ) : ''}\r\n                </div>\r\n              </div>\r\n              <div className=\"header_info\">\r\n                <h3 className=\"tagline\">{this.state.model.tagline}</h3>\r\n                <h3>  Overview</h3>\r\n                <div className=\"overview\">\r\n                  {' '}\r\n                  {this.state.model.overview}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"movie-content__wrapper\">\r\n          <div className=\"white__column\">\r\n            <h3>Top Billed Cast</h3>\r\n            {(this.state.model.cast && this.state.model.cast.length > 0)\r\n              ? (\r\n                <section className=\"movieActors\">\r\n                  {this.state.model.cast?.map((person) => (\r\n                    <div className=\"person-card\" key={person.id}>\r\n                      <Link to={`/person/${person.id}`}>\r\n                        <div\r\n                          className=\"person-image-container\"\r\n                          style={{\r\n                            backgroundImage: `url(${this.getPosterUrl(person.profile_path)\r\n                              ? this.getPosterUrl(person.profile_path)\r\n                              : defaultPerson})`,\r\n                          }}\r\n                        />\r\n                        <div className=\"movieInform-name\">{person.name}</div>\r\n                        <div className=\"movieInform-character\">{person.character}</div>\r\n                      </Link>\r\n                    </div>\r\n                  ))}\r\n                </section>\r\n              )\r\n              : 'We do not have any cast added to this movie. You can help by adding some!'}\r\n            <h3>Movie Crew</h3>\r\n            {(this.state.model.crew && this.state.model.crew.length > 0)\r\n              ? (\r\n                <section className=\"movieActors\">\r\n                  {this.state.model.crew?.map((person) => (\r\n                    <div className=\"person-card\" key={`${person.id}${person.job}`}>\r\n                      <Link to={`/person/${person.id}`}>\r\n                        <div\r\n                          className=\"person-image-container\"\r\n                          style={{\r\n                            backgroundImage: `url(${this.getPosterUrl(person.profile_path)\r\n                              ? this.getPosterUrl(person.profile_path)\r\n                              : defaultPerson})`,\r\n                          }}\r\n                        />\r\n                        <div className=\"movieInform-name\">{person.name}</div>\r\n                        <div className=\"movieInform-character\">{person.job}</div>\r\n                      </Link>\r\n                    </div>\r\n                  ))}\r\n                </section>\r\n              )\r\n              : 'We do not have any crew added to this movie. You can help by adding some!'}\r\n            <h3>Social</h3>\r\n            {(this.state.model.reviews?.results && this.state.model.reviews?.results.length > 0)\r\n              ? (\r\n                <section>\r\n                  <div className=\"reviews-container\">\r\n                    {this.state.model.reviews?.results?.map((review) => (\r\n                      <div className=\"review-user\" key={review.id}>\r\n                        <div className=\"reviews-column-first\">\r\n                          <img\r\n                            alt=\"avatar\"\r\n                            className=\"review-user__avatar\"\r\n                            src={review.author_details.avatar_path\r\n                              ? `${this.getUserImageUrl(review.author_details.avatar_path)}`\r\n                              : `${defaultPerson}`}\r\n                          />\r\n                        </div>\r\n                        <div className=\"reviews-column-second\">\r\n                          <div className=\"reviews-heading\">\r\n                            <h3>\r\n                              A review by\r\n                              {review.author_details.username}\r\n                            </h3>\r\n                            <h5>\r\n                              Written by\r\n                              {review.author_details.username}\r\n                              {' '}\r\n                              on\r\n                              {' '}\r\n                              <>{review.created_at ? dateFormatter.format(new Date(review.created_at)) : '-'}</>\r\n                            </h5>\r\n                          </div>\r\n                          {review.content}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </section>\r\n              ) : 'We don\\'t have any reviews for this movie'}\r\n            <h3>Media</h3>\r\n            {(this.state.model.videos?.results && this.state.model.videos?.results.length > 0) ? (\r\n              <section className=\"trailers\">\r\n                <Embed\r\n                  id={this.state.model.videos?.results[0].key}\r\n                  key={this.state.model.videos?.results[0].id}\r\n                  placeholder={`${posterUrl}/original${this.state.model.backdrop_path}`}\r\n                  source=\"youtube\"\r\n                />\r\n              </section>\r\n            ) : 'We don\\'t have any trailers for this movie'}\r\n\r\n            <h3>Recommendations</h3>\r\n            {(this.state.model.recommendations && this.state.model.recommendations?.length > 0)\r\n              ? (\r\n                <section className=\"movieRecommendations\">\r\n                  {this.state.model.recommendations?.map((recommendation) => (\r\n                    <div className=\"recommendation\" key={recommendation.id}>\r\n                      <Link to={`/movies/${recommendation.id}`}>\r\n                        <div\r\n                          className=\"recommendation-inform\"\r\n                          style={{\r\n                            backgroundImage: recommendation.poster_path\r\n                              ? `url(${posterUrl}/w342${recommendation.poster_path})`\r\n                              : `url(${defaultMovie})`,\r\n                          }}\r\n                        />\r\n                        <div className=\"movieInform-name\">{recommendation.title}</div>\r\n                        <div className=\"movieInform-character\">\r\n                          {recommendation.vote_average * 10}\r\n                          %\r\n                        </div>\r\n                      </Link>\r\n                    </div>\r\n                  ))}\r\n                </section>\r\n              ) : 'We don\\'t have any recommendations for this movie'}\r\n          </div>\r\n          <div className=\"grey__column\">\r\n            <section className=\"split-column\">\r\n              <p>\r\n                <b>Status </b>\r\n                <br />\r\n                {this.state.model.status}\r\n              </p>\r\n              <p>\r\n                <b>Original Language </b>\r\n                <br />\r\n                {this.state.model.original_language ? getFullLanguage(this.state.model.original_language) : '-'}\r\n              </p>\r\n              <p>\r\n                <b>Budget </b>\r\n                <br />\r\n                {this.state.model.budget ? `$${moneyFormatter.format(this.state.model.budget)}` : '-'}\r\n              </p>\r\n              <p>\r\n                <b>Revenue </b>\r\n                <br />\r\n                {this.state.model.revenue ? `$${moneyFormatter.format(this.state.model.revenue)}` : '-'}\r\n              </p>\r\n              <p>\r\n                <b>Keywords </b>\r\n                <br />\r\n                <span className=\"movieDetails-keywords\">\r\n                  {this.state?.model.keywords?.keywords.map((keyword) => (\r\n                    <Button compact size=\"mini\" key={keyword.id}>\r\n                      {keyword.name}\r\n                    </Button>\r\n                  ))}\r\n                </span>\r\n              </p>\r\n            </section>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default MovieDetails;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserWatchlistPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserRatingsPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AccountService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\SearchService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Preloader\\Preloader.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\ProfileMoviesCard\\ProfileMoviesCard.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\common\\utils.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\PopularPeoplePage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserWatchlistPage\\UserWatchlistPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserRatingsPage\\UserRatingsPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PopularPeopleService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts",[],["175","176","177","178","179","180","181","182"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\NotFound\\index.js",[],["183","184","185","186","187","188","189","190"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\NotFound\\NotFound.jsx",[],{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":218,"column":48,"nodeType":"209","messageId":"210","endLine":218,"endColumn":51,"suggestions":"211"},{"ruleId":"191","replacedBy":"212"},{"ruleId":"193","replacedBy":"213"},{"ruleId":"195","replacedBy":"214"},{"ruleId":"197","replacedBy":"215"},{"ruleId":"199","replacedBy":"216"},{"ruleId":"201","replacedBy":"217"},{"ruleId":"203","replacedBy":"218"},{"ruleId":"205","replacedBy":"219"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"220"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},"jest/no-try-expect",["221"],"jsx-a11y/accessible-emoji",[],"lines-around-directive",["222"],"no-spaced-func",["223"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["224","225"],["221"],[],["222"],["223"],[],[],[],[],[],"no-conditional-expect","padding-line-between-statements","func-call-spacing",{"messageId":"226","fix":"227","desc":"228"},{"messageId":"229","fix":"230","desc":"231"},"suggestUnknown",{"range":"232","text":"233"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"232","text":"234"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[7036,7039],"unknown","never"]