[{"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx":"1","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts":"2","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx":"3","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts":"4","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx":"5","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts":"6","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx":"7","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts":"8","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts":"9","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts":"10","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx":"11","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx":"12","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx":"13","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts":"14","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts":"15","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts":"16","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts":"17","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts":"18","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts":"19","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx":"20","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx":"21","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts":"22","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts":"23","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx":"24","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx":"25","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx":"26","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts":"27","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\index.ts":"28","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\index.ts":"29","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\PopularPeoplePage.tsx":"30","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PopularPeopleService.ts":"31","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\SearchService.ts":"32","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AccountService.ts":"33","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserWatchlistPage\\UserWatchlistPage.tsx":"34","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserWatchlistPage\\index.ts":"35","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserRatingsPage\\index.ts":"36","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserRatingsPage\\UserRatingsPage.tsx":"37","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserProfilePage\\UserProfilePage.tsx":"38","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\ProfileMoviesCard\\ProfileMoviesCard.tsx":"39","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Preloader\\Preloader.tsx":"40"},{"size":523,"mtime":1610354700949,"results":"41","hashOfConfig":"42"},{"size":425,"mtime":499162500000,"results":"43","hashOfConfig":"42"},{"size":1685,"mtime":1611752304861,"results":"44","hashOfConfig":"42"},{"size":45,"mtime":1610055202984,"results":"45","hashOfConfig":"42"},{"size":3695,"mtime":1611856781973,"results":"46","hashOfConfig":"42"},{"size":34,"mtime":1609855466816,"results":"47","hashOfConfig":"42"},{"size":2521,"mtime":1611345993385,"results":"48","hashOfConfig":"42"},{"size":4059,"mtime":1611576224396,"results":"49","hashOfConfig":"42"},{"size":412,"mtime":1611151547747,"results":"50","hashOfConfig":"42"},{"size":2066,"mtime":1610303235341,"results":"51","hashOfConfig":"42"},{"size":586,"mtime":1611748722448,"results":"52","hashOfConfig":"42"},{"size":783,"mtime":1610289972450,"results":"53","hashOfConfig":"42"},{"size":11835,"mtime":1610385953328,"results":"54","hashOfConfig":"42"},{"size":1069,"mtime":1610291402716,"results":"55","hashOfConfig":"42"},{"size":1056,"mtime":1610129152892,"results":"56","hashOfConfig":"42"},{"size":118,"mtime":1610143118042,"results":"57","hashOfConfig":"42"},{"size":36215,"mtime":1610147753343,"results":"58","hashOfConfig":"42"},{"size":28427,"mtime":1610148957217,"results":"59","hashOfConfig":"42"},{"size":28147,"mtime":1610194707873,"results":"60","hashOfConfig":"42"},{"size":1984,"mtime":1611757221705,"results":"61","hashOfConfig":"42"},{"size":14185,"mtime":1611859386450,"results":"62","hashOfConfig":"42"},{"size":5107,"mtime":1611067978761,"results":"63","hashOfConfig":"42"},{"size":1081,"mtime":1610315598020,"results":"64","hashOfConfig":"42"},{"size":9059,"mtime":1611666343485,"results":"65","hashOfConfig":"42"},{"size":3761,"mtime":1611855442739,"results":"66","hashOfConfig":"42"},{"size":8709,"mtime":1611859013942,"results":"67","hashOfConfig":"42"},{"size":3734,"mtime":1611262852775,"results":"68","hashOfConfig":"42"},{"size":43,"mtime":1610355429685,"results":"69","hashOfConfig":"42"},{"size":52,"mtime":1610724377170,"results":"70","hashOfConfig":"42"},{"size":3382,"mtime":1611856795749,"results":"71","hashOfConfig":"42"},{"size":1199,"mtime":1610728359054,"results":"72","hashOfConfig":"42"},{"size":1498,"mtime":1611604514986,"results":"73","hashOfConfig":"42"},{"size":2474,"mtime":1611658543414,"results":"74","hashOfConfig":"42"},{"size":2161,"mtime":1611859603853,"results":"75","hashOfConfig":"42"},{"size":48,"mtime":1611353022718,"results":"76","hashOfConfig":"42"},{"size":46,"mtime":1611353438607,"results":"77","hashOfConfig":"42"},{"size":2123,"mtime":1611859674214,"results":"78","hashOfConfig":"42"},{"size":219,"mtime":1611353625109,"results":"79","hashOfConfig":"42"},{"size":2441,"mtime":1611859982906,"results":"80","hashOfConfig":"42"},{"size":242,"mtime":1611856773222,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"z8dq48",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"84"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"84"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"84"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"84"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"84"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx",[],["177","178"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx",["179","180"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport MoviesListPage from './features/MoviesListPage';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Login from './features/Login';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport MovieDetails from './features/MovieDetails/MovieDetails';\r\nimport Header from './components/Header/Header';\r\nimport Footer from './components/Footer/Footer';\r\nimport PersonPage from './features/PersonPage/PersonPage';\r\nimport PopularPeoplePage from './features/PopularPeoplePage';\r\nimport UserWatchlistPage from './features/UserWatchlistPage';\r\nimport UserRatingsPage from './features/UserRatingsPage';\r\nimport UserProfilePage from './features/UserProfilePage/UserProfilePage';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={MoviesListPage} />\r\n          <Route exact path=\"/movies/:id\" component={MovieDetails} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/person/:id\" component={PersonPage} />\r\n          <Route exact path=\"/person/\" component={PopularPeoplePage} />\r\n          <Route exact path=\"/u/:userId/watchlist\" component={UserWatchlistPage} />\r\n          <Route exact path=\"/u/:userId/ratings\" component={UserRatingsPage} />\r\n          <Route exact path=\"/u/:userId/\" component={UserProfilePage} />\r\n          {/* <Route path=\"*\" component={NotFound} /> */}\r\n        </Switch>\r\n        <Footer />\r\n      </Router>\r\n      {/* <Error /> */}\r\n      {/* <TestTask/> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx",["181"],"import React, { Component } from \"react\";\r\nimport DiscoverMoviesService from './../../services/DiscoverMoviesService';\r\nimport { MovieDiscoverDto } from './../../models/MovieDiscoverDto';\r\nimport MoviesList from './MoviesList/MoviesList';\r\nimport MoviesOrdering from './MoviesOrdering/MoviesOrdering';\r\nimport SearchMovies, { SearchMoviesState } from './SearchMovies/SearchMovies';\r\nimport { Button, Grid } from 'semantic-ui-react';\r\nimport './moviesListPage.css';\r\nimport Preloader from './../../components/Preloader/Preloader';\r\n\r\ntype MoviesListPageProps = {\r\n\r\n}\r\ntype MoviesListPageState = {\r\n  movies: Array<MovieDiscoverDto>;\r\n  total: number;\r\n  filter: SearchMoviesState;\r\n  orderBy: string;\r\n  page: number;\r\n  loading: boolean;\r\n}\r\nclass MoviesListPage extends Component<MoviesListPageProps, MoviesListPageState>{\r\n  discoverMoviesService: DiscoverMoviesService;\r\n  constructor(props: MoviesListPageProps) {\r\n    super(props);\r\n    this.discoverMoviesService = new DiscoverMoviesService();\r\n    this.state = {\r\n      movies: [],\r\n      total: 0,\r\n      filter: {\r\n        activeIndex: 0,\r\n        isAllReleases: true,\r\n        releaseTypes: new Set([1, 2, 3, 4, 5, 6]),\r\n        isAllCountries: true,\r\n        releaseCountry: null,\r\n        certification: new Set([]),\r\n        selectedLanguage: null,\r\n        voteAverageMin: 0,\r\n        voteAverageMax: 10,\r\n        voteCountMin: 0,\r\n        movieDurationMin: 0,\r\n        movieDurationMax: 400,\r\n        releaseDateFrom: '',\r\n        releaseDateTo: '',\r\n        genres: new Set([]),\r\n      },\r\n      orderBy: 'popularity.desc',\r\n      page: 1,\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.updateMovies(this.state.filter);\r\n  }\r\n\r\n  updateMovies = async (filter: SearchMoviesState) => {\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    let searchingMovies = await this.discoverMoviesService.findMovies(this.state.filter, this.state.orderBy, this.state.page);\r\n    this.setState({\r\n      movies: searchingMovies.results,\r\n      total: searchingMovies.total_results,\r\n      filter: filter,\r\n      page: 1,\r\n      loading: false,\r\n    });\r\n    }\r\n\r\n  handleSearchClicked = async (filter: SearchMoviesState) => {\r\n    await this.updateMovies(filter);\r\n  }\r\n\r\n  handleOrderChanged = (value: string) => {\r\n    this.setState({\r\n      orderBy: value,\r\n    });\r\n  }\r\n\r\n  handleLoadMoreClicked = async () => {\r\n    const nextPage = this.state.page + 1;\r\n    const searchingMovies = await this.discoverMoviesService.findMovies(this.state.filter, this.state.orderBy, nextPage);\r\n    const allMovies = this.state.movies.concat(searchingMovies.results);\r\n    this.setState({\r\n      page: nextPage,\r\n      movies: allMovies,\r\n      total: searchingMovies.total_results,\r\n    });\r\n  }\r\n\r\n  render = () => {\r\n    if (this.state.loading === true) {\r\n      return (<Preloader />)\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"moviesList-toggle\">\r\n            <MoviesOrdering\r\n              onOrderChanged={this.handleOrderChanged}\r\n              selectedValue={this.state.orderBy} />\r\n            <SearchMovies\r\n              onSearchClicked={this.handleSearchClicked}\r\n              initialFilter={this.state.filter} />\r\n          </div>\r\n          <div className=\"moviesList-list\">\r\n            <MoviesList\r\n              movies={this.state.movies} />\r\n            <Button\r\n              className='load-more'\r\n              secondary\r\n              fluid\r\n              onClick={this.handleLoadMoreClicked}>\r\n              Load more\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default MoviesListPage;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx",["182"],"import React, { Component, RefObject } from \"react\";\r\nimport './login.css';\r\nimport AuthenticationService from './../../services/AuthenticationService';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Form, Button, Checkbox } from \"semantic-ui-react\";\r\ntype LoginProps = {\r\n\r\n}\r\n// type LoginState = {\r\n//   loginError: boolean;\r\n// }\r\nclass Login extends Component<RouteComponentProps<LoginProps>, {}> {\r\n  userNameInput: RefObject<HTMLInputElement>;\r\n  passwordInput: RefObject<HTMLInputElement>;\r\n  authService: AuthenticationService;\r\n  constructor(props: RouteComponentProps<LoginProps>) {\r\n    super(props);\r\n    this.userNameInput = React.createRef();\r\n    this.passwordInput = React.createRef();\r\n    this.authService = new AuthenticationService();\r\n    // this.state = {\r\n    //   loginError: false\r\n    // }\r\n  }\r\n  handleFormSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    let username = this.userNameInput?.current?.value;\r\n    let password = this.passwordInput?.current?.value;\r\n    if (username && password) {\r\n      let loginResult = await this.authService.login(username, password);\r\n      if (loginResult) {\r\n        this.props.history.push('/');\r\n      }\r\n    }\r\n    // else {\r\n    //   this.setState({\r\n    //     loginError: true\r\n    //   });\r\n    // }\r\n  }\r\n  render = () => {\r\n    return (\r\n      <>\r\n        <div className=\"login-wrapper\">\r\n          <div className=\"login-content__wrapper\">\r\n            <div className=\"login-wrapper\">\r\n              <h2 className='login-header'>Login to your account</h2>\r\n               <Form onSubmit={this.handleFormSubmit}>\r\n                <Form.Field\r\n                  icon='user'\r\n                  iconPosition='left'>\r\n                  <label className=\"login-text\">Username</label>\r\n                  <input ref={this.userNameInput} placeholder='Username' />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <label className=\"login-text\">Password</label>\r\n                  <input ref={this.passwordInput} type='password' placeholder='Password' />\r\n                </Form.Field>\r\n                <Button type='submit' color=\"blue\">Login</Button>\r\n              </Form>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* {this.state.loginError ? <div className=\"login-error\">invalid username or password</div> : ''} */}\r\n        {/* </div>\r\n          </div>\r\n        </form> */}\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\nexport default Login;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts",["183"],"import axios, { AxiosResponse } from 'axios';\r\nimport { SearchMoviesState } from '../features/MoviesListPage/SearchMovies/SearchMovies';\r\nimport { DiscoverMoviesFilterRequestDto } from '../models/DiscoverMoviesFilterRequestDto';\r\nimport { DiscoverResponseDto } from '../models/DiscoverResponseDto';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nclass DiscoverMoviesService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  findMovies = async (filter: SearchMoviesState | null, orderBy: string, page: number): Promise<DiscoverResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/discover/movie`);\r\n    const request: DiscoverMoviesFilterRequestDto | null = this.createRequest(filter, orderBy, page);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<DiscoverResponseDto> = await axios.get<DiscoverResponseDto>(url);\r\n    return response.data;\r\n  }\r\n  createRequest = (filter: SearchMoviesState | null, orderBy: string, page: number): DiscoverMoviesFilterRequestDto | null => {\r\n    if (!filter) {\r\n      return null;\r\n    }\r\n    const request: DiscoverMoviesFilterRequestDto = {\r\n      page: page,\r\n      sort_by: orderBy,\r\n      \"release_date.gte\": filter.releaseDateFrom,\r\n      \"release_date.lte\": filter.releaseDateFrom,\r\n      with_release_type: Array.from(filter.releaseTypes).join('|'),\r\n      region: filter.releaseCountry,\r\n      with_genres: Array.from(filter.genres).join(','),\r\n      certification: Array.from(filter.certification).join('|'),\r\n      with_original_language: filter.selectedLanguage,\r\n      \"vote_average.gte\": filter.voteAverageMin,\r\n      \"vote_average.lte\": filter.voteAverageMax,\r\n      \"vote_count.gte\": filter.voteCountMin,\r\n      \"with_runtime.gte\": filter.movieDurationMin,\r\n      \"with_runtime.lte\": filter.movieDurationMax,\r\n    }\r\n    return request;\r\n  }\r\n}\r\nexport default DiscoverMoviesService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx",["184"],"import React from \"react\";\r\nimport { Grid } from 'semantic-ui-react';\r\nimport './moviesList.css';\r\nimport { MovieDiscoverDto } from './../../../models/MovieDiscoverDto';\r\n\r\nimport MoviesCard from \"../MoviesCard/MoviesCard\";\r\n\r\ntype MoviesListProps = {\r\n  movies: Array<MovieDiscoverDto>\r\n}\r\n\r\nexport default function MoviesList(props: MoviesListProps) {\r\n  return (\r\n    <div className=\"moviesList\">\r\n      <div className=\"allMovies\">\r\n          {props.movies.map((movie) => (\r\n              <MoviesCard key={movie.id} movie={movie}/>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts",[],["185","186"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx",["187"],"import React, { Component } from 'react';\r\nimport { posterUrl } from '../../../configuration/configuration';\r\nimport defaultMovie from '../../../assets/img/glyphicons-basic-38-picture-grey.svg';\r\nimport { MovieDiscoverDto } from './../../../models/MovieDiscoverDto';\r\nimport './moviesCard.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Icon } from 'semantic-ui-react';\r\ntype MoviesCardProps = {\r\n  movie: MovieDiscoverDto\r\n}\r\nexport default function MoviesCard(props: MoviesCardProps) {\r\n  const { movie } = props;\r\n  const formatter = new Intl.DateTimeFormat(\"ru\");\r\n  return (\r\n    <>\r\n      <Link to={`/movies/${movie.id}`}>\r\n        <div className=\"film-container\" key={movie.id}>\r\n          <img\r\n            className='film-image'\r\n            src={`${posterUrl}/w300/${movie.poster_path}`}\r\n            onError={(e: any) => {\r\n              if (e.target.src !== defaultMovie) {\r\n                e.target.src = defaultMovie;\r\n              }\r\n            }}\r\n            alt=\"movieImage\" />\r\n          <div className='film-voting' style={{\r\n            borderColor:\r\n              movie.vote_average >= 7 ? '#21d07a' :\r\n                movie.vote_average >= 4 ? '#d2d531' :\r\n                  movie.vote_average > 0 ? '#cb215b' : '#666666'\r\n          }}>\r\n            {movie.vote_average !== 0 ?\r\n              <>\r\n                {movie.vote_average * 10}\r\n                <span className=\"percent\">%</span>\r\n              </> :\r\n              'NR'}\r\n          </div>\r\n          <Icon name='heart' color='red' size='large' link className='movieCard-like' />\r\n          <Icon name=\"bookmark\" color='blue' size='large' link className='movieCard-watchList' />\r\n          <div className=\"film-heading\">\r\n            <div className=\"film-heading-title\">{movie.title}</div>\r\n            <div className=\"film-release\">\r\n              {formatter.format(new Date(movie.release_date))}\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </Link >\r\n    </>\r\n  )\r\n}\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx",["188"],"import React, { Component } from 'react';\r\nimport { Link, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport MovieDetailsService from './../../services/MovieDetailsService';\r\nimport { MovieDetailsViewModel } from './../../models/MovieDetails/ViewModels/MovieDetailsViewModel';\r\nimport './movieDetails.css';\r\nimport defaultMovie from '../../assets/img/glyphicons-basic-38-picture-grey.svg';\r\nimport { Icon, Button, Embed, Modal, Popup, Rating, RatingProps } from 'semantic-ui-react';\r\nimport AccountService from './../../services/AccountService';\r\nimport AuthenticationService from '../../services/AuthenticationService';\r\nimport { posterUrl } from './../../configuration/configuration';\r\nimport Preloader from './../../components/Preloader/Preloader';\r\n\r\ntype MovieDetailsProps = {\r\n  id: string\r\n}\r\ntype MovieDetailsState = {\r\n  model: MovieDetailsViewModel;\r\n  loading: boolean;\r\n}\r\nclass MovieDetails extends Component<RouteComponentProps<MovieDetailsProps>, MovieDetailsState> {\r\n  movieDetailsService: MovieDetailsService;\r\n  accountService: AccountService;\r\n  authenticationService: AuthenticationService;\r\n  id: string;\r\n  constructor(props: RouteComponentProps<MovieDetailsProps>) {\r\n    super(props);\r\n    this.id = props.match.params.id;\r\n    this.movieDetailsService = new MovieDetailsService();\r\n    this.accountService = new AccountService();\r\n    this.authenticationService = new AuthenticationService();\r\n    this.state = {\r\n      model: {\r\n        vote_average: 0,\r\n      },\r\n      loading: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.updatePage(this.id);\r\n  }\r\n\r\n  async componentDidUpdate(prevProps: any) {\r\n    if (this.props.match.params.id !== prevProps.match.params.id) {\r\n      await this.updatePage(this.props.match.params.id);\r\n    }\r\n  }\r\n\r\n  updatePage = async (id: string) => {\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    const movie = await this.movieDetailsService.getMovie(id);\r\n    this.setState({\r\n      model: movie,\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  getPosterUrl = (url: string): string | null => {\r\n    if (!url) {\r\n      return null;\r\n    } else if (!url.includes('http')) {\r\n      return `${posterUrl}/w154${url}`;\r\n    }\r\n    return url;\r\n  }\r\n\r\n  getUserImageUrl = (url: string): string | null => {\r\n    if (!url) {\r\n      return null;\r\n    } else if (url.includes('tmdb')) {\r\n      return url;\r\n    } else if (url.includes('gravatar')) {\r\n      return url.slice(1);\r\n    }\r\n    return `${posterUrl}/w185${url}`;\r\n  }\r\n\r\n  handleRatingMovieClicked = (event: React.MouseEvent<HTMLDivElement>, data: RatingProps) => {\r\n    if (data.rating) {\r\n      this.accountService.rateMovie(this.id, data.rating as number);\r\n    }\r\n  }\r\n\r\n  handleToWatchListClicked = () => {\r\n    const accountId = this.authenticationService.getCurrentAccountDetails()?.id;\r\n    if (accountId) {\r\n      // this.accountService.addOrRemoveToWatchList(accountId, this.id, !markAsAdd);\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const dateFormatter = new Intl.DateTimeFormat(\"ru\");\r\n    const moneyFormatter = new Intl.NumberFormat(\"en\", {\r\n      maximumSignificantDigits: 3\r\n    });\r\n    if (this.state.loading === true) {\r\n      return (<Preloader />)\r\n    }\r\n    else {\r\n      return (\r\n        <div className=\"movieDetails-container\">\r\n          <div className=\"movie-bg\"\r\n            style={{\r\n              background: this.state.model.backdrop_path ?\r\n                `url(${posterUrl}/original${this.state.model.backdrop_path})` : 'grey'\r\n            }}>\r\n            <div className=\"movie-bg__filter\">\r\n              <div className=\"movie_poster__column\">\r\n                <img src={`${posterUrl}/w342${this.state.model.poster_path}`}\r\n                  alt=\"movie poster\"\r\n                  className=\"movie-poster\"\r\n                  onError={(e: any) => {\r\n                    if (e.target.src !== defaultMovie) {\r\n                      e.target.src = defaultMovie;\r\n                    }\r\n                  }} />\r\n              </div>\r\n              <div className=\"movie_inform__column\">\r\n                <h2 className='movie-title'>{this.state.model.title}\r\n                  <span className=\"movie-year\">{this.state.model.release_date ? ` (${this.state.model.release_date?.substr(0, 4)})` : ''}</span>\r\n                  <div className=\"facts\">\r\n                    <span className=\"release-date\">\r\n                      {this.state.model.release_date ? dateFormatter.format(new Date(this.state.model.release_date)) : ''}\r\n                    </span>\r\n                    <span>\r\n                      {this.state.model.genres?.map((genre) => <span key={genre.id}>\r\n                        <Icon color='red' name='circle outline' size='small' />\r\n                        {genre.name}\r\n                      </span>)}\r\n                    </span>\r\n                    <span>\r\n                      <Icon color='red' name='circle outline' size='small' />\r\n                      {this.state.model.runtime ? `${this.state.model.runtime} min` : ''}\r\n                    </span>\r\n                  </div>\r\n                </h2>\r\n\r\n                <div className=\"actions\">\r\n                  <div className=\"movie_inform-vote\">\r\n                    <div className=\"user-score\">\r\n                      <div className=\"movie_inform-voting\" style={{\r\n                        borderColor:\r\n                          this.state.model.vote_average >= 7 ? '#21d07a' :\r\n                            this.state.model.vote_average >= 4 ? '#d2d531' :\r\n                              this.state.model.vote_average > 0 ? '#cb215b' : '#666666'\r\n                      }}>{this.state.model.vote_average !== 0 ? `${this.state.model.vote_average * 10}%` : 'NR'}\r\n                      </div>\r\n                      <span>User <br /> Score</span>\r\n                    </div>\r\n                    <div className=\"movie_inform-buttons\">\r\n                      <Button\r\n                        color='red'\r\n                        circular\r\n                        icon='heart'\r\n                        // onClick={}\r\n                        size='large'\r\n                        className='movie_inform-like' />\r\n                      <Button\r\n                        color='blue'\r\n                        circular\r\n                        icon='bookmark'\r\n                        onClick={this.handleToWatchListClicked}\r\n                        size='large'\r\n                        className='movie_inform-mark' />\r\n                      <Popup\r\n                        on='click'\r\n                        position='bottom center'\r\n                        pinned\r\n                        trigger={\r\n                          <Button\r\n                            color='yellow'\r\n                            circular\r\n                            icon='star'\r\n                            onClick={this.handleToWatchListClicked}\r\n                            size='large'\r\n                            className='movie_inform-star' />\r\n                        }>\r\n                        <Popup.Content>\r\n                          {AuthenticationService.isAuthenticated() ?\r\n                            <Rating\r\n                              onRate={this.handleRatingMovieClicked}\r\n                              icon='star'\r\n                              defaultRating={0}\r\n                              maxRating={10} /> : 'Login to rate this movie'}\r\n                        </Popup.Content>\r\n                      </Popup>\r\n                    </div>\r\n                    {this.state.model.videos?.results[0] ?\r\n                      <Modal\r\n                        closeIcon={true}\r\n                        trigger={\r\n                          <Button className=\"movie_inform-youtube\" compact={true} color='youtube'>\r\n                            <Icon name='youtube play' />\r\n                            Play trailer\r\n                        </Button>\r\n                        }>\r\n                        <Modal.Content>\r\n                          <Embed\r\n                            key={this.state.model.videos?.results[0].id}\r\n                            id={this.state.model.videos?.results[0].key}\r\n                            placeholder={`${posterUrl}/original${this.state.model.backdrop_path}`}\r\n                            source='youtube' />\r\n                        </Modal.Content>\r\n                      </Modal> : ''}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"header_info\">\r\n                  <h3 className=\"tagline\">{this.state.model.tagline}</h3>\r\n                  <h3>  Overview</h3>\r\n                  <div className=\"overview\"> {this.state.model.overview}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"movie-content__wrapper\">\r\n            <div className=\"white__column\">\r\n\r\n              <h3>Top Billed Cast</h3>\r\n              <section className=\"movieActors\">\r\n                {this.state.model.cast?.map((person) => (\r\n                  <div className=\"person-card\" key={person.id}>\r\n                    <Link to={`/person/${person.id}`}>\r\n                      <div\r\n                        className='person-image-container'\r\n                        style={{\r\n                          backgroundImage: `url(${this.getPosterUrl(person.profile_path) ?\r\n                            this.getPosterUrl(person.profile_path) :\r\n                            defaultMovie})`\r\n                        }}>\r\n                      </div>\r\n                      <div className=\"movieInform-name\">{person.name}</div>\r\n                      <div className=\"movieInform-character\">{person.character}</div>\r\n                    </Link>\r\n                  </div>))}\r\n              </section>\r\n\r\n              <h3>Social</h3>\r\n              {(this.state.model.reviews?.results && this.state.model.reviews?.results.length > 0) ? <section>\r\n                <div className=\"reviews-container\">\r\n                  {this.state.model.reviews?.results?.map((review) => (\r\n                    <div className=\"review-user\" key={review.id}>\r\n                      <div className=\"reviews-column-first\">\r\n                        <img alt=\"avatar\"\r\n                          className=\"review-user__avatar\"\r\n                          src={review.author_details.avatar_path ?\r\n                            `${this.getUserImageUrl(review.author_details.avatar_path)}` :\r\n                            `${defaultMovie}`} />\r\n                      </div>\r\n                      <div className=\"reviews-column-second\">\r\n                        <div className=\"reviews-heading\">\r\n                          <h3>A review by {review.author_details.username}</h3>\r\n                          <h5>Written by {review.author_details.username} on\r\n                      <> {review.created_at ? dateFormatter.format(new Date(review.created_at)) : '-'}</>\r\n                          </h5>\r\n                        </div>\r\n                        {review.content}\r\n                      </div>\r\n                    </div>))}\r\n                </div>\r\n              </section> : `We don't have any reviews for this movie`}\r\n\r\n              <h3>Media</h3>\r\n              {(this.state.model.videos?.results && this.state.model.videos?.results.length > 0) ? <section className=\"trailers\">\r\n                <Embed\r\n                  id={this.state.model.videos?.results[0].key}\r\n                  key={this.state.model.videos?.results[0].id}\r\n                  placeholder={`${posterUrl}/original${this.state.model.backdrop_path}`}\r\n                  source='youtube' />\r\n              </section> : `We don't have any trailers for this movie`}\r\n\r\n              <h3>Recommendations</h3>\r\n              {(this.state.model.recommendations && this.state.model.recommendations?.length > 0) ?\r\n                <section className=\"movieRecommendations\">\r\n                  {this.state.model.recommendations?.map((recommendation) => (\r\n                    <div className=\"recommendation\" key={recommendation.id}>\r\n                      <Link to={`/movies/${recommendation.id}`}>\r\n                        <div\r\n                          className='recommendation-inform'\r\n                          style={{\r\n                            backgroundImage: recommendation.poster_path ?\r\n                              `url(${posterUrl}/w342${recommendation.poster_path})` :\r\n                              `url(${defaultMovie})`\r\n                          }}>\r\n                        </div>\r\n                        <div className=\"movieInform-name\">{recommendation.title}</div>\r\n                        <div className=\"movieInform-character\" >{recommendation.vote_average * 10}%</div>\r\n                      </Link>\r\n                    </div>))}\r\n                </section> : `We don't have any recommendations for this movie`}\r\n            </div>\r\n            <div className=\"grey__column\">\r\n              <section className=\"split-column\">\r\n                <p>\r\n                  <strong>Status </strong><br />\r\n                  {this.state.model.status}\r\n                </p>\r\n                <p>\r\n                  <strong>Original Language </strong><br />\r\n                  {this.state.model.original_language}\r\n                </p>\r\n                <p>\r\n                  <strong>Budget </strong><br />\r\n                  {this.state.model.budget ? '$' + moneyFormatter.format(this.state.model.budget) : '-'}\r\n                </p>\r\n                <p>\r\n                  <strong>Revenue </strong><br />\r\n                  {this.state.model.revenue ? '$' + moneyFormatter.format(this.state.model.revenue) : '-'}\r\n                </p>\r\n                <p>\r\n                  <strong>Keywords </strong><br />\r\n                  <div className=\"movieDetails-keywords\">\r\n                    {this.state?.model.keywords?.keywords.map((keyword) =>\r\n                      <Button compact size='mini'>\r\n                        {keyword.name}\r\n                      </Button>)}\r\n                  </div>\r\n                </p>\r\n              </section>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default MovieDetails;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts",["189"],"import TmdbBaseService from './TmdbBaseService';\r\nimport { MovieDetailsViewModel } from '../models/MovieDetails/ViewModels/MovieDetailsViewModel';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { MovieDetailsResponseDto } from '../models/MovieDetails/Dtos/MovieDetailsResponseDto';\r\nimport { MovieCastViewModel } from './../models/MovieDetails/ViewModels/MovieCastViewModel';\r\nimport { MovieCastResponseDto } from './../models/MovieDetails/Dtos/MovieCastResponseDto';\r\nimport { MovieReviewResponseDto } from './../models/MovieDetails/Dtos/MovieReviewResponseDto';\r\nimport { MovieRecommendationsResponseDto } from '../models/MovieDetails/Dtos/MovieRecommendationsResponseDto';\r\nimport { MovieRecommendationsViewModel } from './../models/MovieDetails/ViewModels/MovieRecommendationsViewModel';\r\nimport { MovieKeywordsResponseDto } from '../models/MovieDetails/Dtos/MovieKeywordsResponseDto';\r\nimport { MovieVideosResponseDto } from '../models/MovieDetails/Dtos/MovieVideosResponseDto';\r\n\r\nclass MovieDetailsService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public getMovie = async (id: string): Promise<MovieDetailsViewModel> => {\r\n    let movieDetails = await this.getDetails(id);\r\n    let movieItems = await Promise.all([\r\n      this.getCast(id),\r\n      this.getReviews(id),\r\n      this.getRecommendations(id),\r\n      this.getKeywords(id),\r\n      this.getVideos(id)\r\n    ]);\r\n    movieDetails.cast = movieItems[0];\r\n    movieDetails.reviews = movieItems[1];\r\n    movieDetails.recommendations = movieItems[2];\r\n    movieDetails.keywords = movieItems[3];\r\n    movieDetails.videos = movieItems[4];\r\n    return movieDetails;\r\n  }\r\n\r\n  private getDetails = async (id: string): Promise<MovieDetailsViewModel> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}`);\r\n    const detailsResponse: AxiosResponse<MovieDetailsResponseDto> = await axios.get<MovieDetailsResponseDto>(url);\r\n    let result: MovieDetailsViewModel = {\r\n      backdrop_path: detailsResponse.data.backdrop_path,\r\n      budget: detailsResponse.data.budget,\r\n      genres: detailsResponse.data.genres,\r\n      homepage: detailsResponse.data.homepage,\r\n      id: detailsResponse.data.id,\r\n      original_language: detailsResponse.data.original_language,\r\n      original_title: detailsResponse.data.original_title,\r\n      overview: detailsResponse.data.overview,\r\n      poster_path: detailsResponse.data.poster_path,\r\n      release_date: detailsResponse.data.release_date,\r\n      revenue: detailsResponse.data.revenue,\r\n      runtime: detailsResponse.data.runtime,\r\n      status: detailsResponse.data.status,\r\n      tagline: detailsResponse.data.tagline,\r\n      title: detailsResponse.data.title,\r\n      video: detailsResponse.data.video,\r\n      vote_average: detailsResponse.data.vote_average,\r\n      vote_count: detailsResponse.data.vote_count,\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getCast = async (id: string): Promise<MovieCastViewModel[]> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/credits`);\r\n    const detailsResponse: AxiosResponse<MovieCastResponseDto> = await axios.get<MovieCastResponseDto>(url);\r\n    let result: Array<MovieCastViewModel> = detailsResponse.data.cast.map((item) => {\r\n      return {\r\n        id: item.id,\r\n        name: item.name,\r\n        profile_path: item.profile_path,\r\n        cast_id: item.cast_id,\r\n        character: item.character,\r\n        order: item.order,\r\n        \r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private getReviews = async (id: string): Promise<MovieReviewResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/reviews`);\r\n    const detailsResponse: AxiosResponse<MovieReviewResponseDto> = await axios.get<MovieReviewResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n\r\n  private getRecommendations = async (id: string): Promise<MovieRecommendationsViewModel[]> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/recommendations`);\r\n    const detailsResponse: AxiosResponse<MovieRecommendationsResponseDto> = await axios.get<MovieRecommendationsResponseDto>(url);\r\n    let result: Array<MovieRecommendationsViewModel> = detailsResponse.data.results.map((item) => {\r\n      return {\r\n        poster_path: item.poster_path,\r\n        title: item.title,\r\n        id: item.id,\r\n        vote_average: item.vote_average,\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  private getKeywords = async (id: string): Promise<MovieKeywordsResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/keywords`);\r\n    const detailsResponse: AxiosResponse<MovieKeywordsResponseDto> = await axios.get<MovieKeywordsResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n  private getVideos = async (id: string): Promise<MovieVideosResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/videos`);\r\n    const detailsResponse: AxiosResponse<MovieVideosResponseDto> = await axios.get<MovieVideosResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n}\r\nexport default MovieDetailsService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx",["190"],"import React, { Component, ReactElement } from 'react';\r\nimport './header.css';\r\nimport logo from '../../assets/img/logo.svg';\r\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\r\n// import { withRouter } from \"react-router\";\r\nimport { Button, Icon, Popup, Search, SearchProps, SearchResultData } from 'semantic-ui-react';\r\nimport SearchService from './../../services/SearchService';\r\nimport { SearchResult } from '../../models/SearchResponseDto';\r\nimport AuthenticationService from './../../services/AuthenticationService';\r\nimport AccountService from './../../services/AccountService';\r\nimport { posterUrl } from './../../configuration/configuration';\r\nimport defaultMovie from './../../assets/img/glyphicons-basic-38-picture-grey.svg';\r\n\r\ntype HeaderProps = {\r\n\r\n}\r\n\r\ntype HeaderState = {\r\n  isSearchOn: boolean;\r\n  searchState: SearchState;\r\n}\r\n\r\ntype SearchResultModel = {\r\n  title: string;\r\n  description: string;\r\n  image: string;\r\n  id: number;\r\n  category?: string;\r\n}\r\n\r\ntype SearchCategoryModel = {\r\n  name: string;\r\n  results: Array<SearchResultModel>;\r\n}\r\n\r\ntype SearchModel = {\r\n  movies: SearchCategoryModel;\r\n  persons: SearchCategoryModel;\r\n}\r\n\r\ntype SearchState = {\r\n  loading: boolean;\r\n  results?: SearchModel;\r\n  value?: string;\r\n}\r\n\r\nconst initialState: HeaderState = {\r\n  isSearchOn: false,\r\n  searchState: {\r\n    loading: false,\r\n    results: {\r\n      movies: {\r\n        name: 'movies',\r\n        results: [],\r\n      },\r\n      persons: {\r\n        name: 'persons',\r\n        results: [],\r\n      }\r\n    },\r\n    value: '',\r\n  },\r\n}\r\n\r\nclass Header extends Component<RouteComponentProps<HeaderProps>, HeaderState> {\r\n  searchService: SearchService;\r\n  authenticationService: AuthenticationService;\r\n  accountService: AccountService;\r\n  constructor(props: RouteComponentProps<HeaderProps>) {\r\n    super(props);\r\n    this.state = initialState;\r\n    this.authenticationService = new AuthenticationService();\r\n    this.accountService = new AccountService();\r\n    this.searchService = new SearchService();\r\n  }\r\n\r\n  handleSearchClicked = () => {\r\n    this.setState({\r\n      isSearchOn: !this.state.isSearchOn,\r\n    });\r\n  }\r\n\r\n  handleClearSearchClick = () => {\r\n    this.setState({\r\n      searchState: {\r\n        value: '',\r\n        loading: false,\r\n      }\r\n    });\r\n  }\r\n\r\n  handleSearchChange = async (event: React.MouseEvent<HTMLElement>, data: SearchProps) => {\r\n    this.setState({\r\n      searchState: {\r\n        loading: true,\r\n        value: data.value,\r\n      }\r\n    });\r\n    if (data.value) {\r\n      const searchResult = await this.searchService.findSearchResults(data.value);\r\n      const moviesResult: SearchResultModel[] = searchResult.results.filter((item) => item.media_type === 'movie').map((item: SearchResult) => {\r\n        let model: SearchResultModel = {\r\n          description: item.overview,\r\n          title: item.title,\r\n          image: item.poster_path ? `${posterUrl}/w92${item.poster_path}` : defaultMovie,\r\n          id: item.id,\r\n          category: 'movies'\r\n        }\r\n        return model;\r\n      });\r\n      const personsResult: SearchResultModel[] = searchResult.results.filter((item) => item.media_type === 'person').map((item: SearchResult) => {\r\n        let model: SearchResultModel = {\r\n          description: item.known_for_department,\r\n          title: item.name,\r\n          image: item.profile_path ? `${posterUrl}/w185${item.profile_path}` : defaultMovie,\r\n          id: item.id,\r\n          category: 'person'\r\n        }\r\n        return model;\r\n      });\r\n      this.setState({\r\n        searchState: {\r\n          loading: false,\r\n          results: {\r\n            movies: {\r\n              name: 'movies',\r\n              results: moviesResult,\r\n            },\r\n            persons: {\r\n              name: 'persons',\r\n              results: personsResult,\r\n            }\r\n          },\r\n          value: data.value,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  handleLogoutClicked = () => {\r\n    this.authenticationService.logOut();\r\n    this.props.history.push('/login');\r\n  }\r\n\r\n  handleRatingsClicked = () => {\r\n    const json = localStorage.getItem('accountDetailsKey');\r\n    if (json) {\r\n      const accountDetailsValue = JSON.parse(json);\r\n      const page = 1;\r\n      this.accountService.getRatings(accountDetailsValue.id, page);\r\n      this.props.history.push(`/u/${accountDetailsValue.username}/ratings`);\r\n    }\r\n  }\r\n\r\n  handleWatchlistClicked = () => {\r\n    const json = localStorage.getItem('accountDetailsKey');\r\n    if (json) {\r\n      const accountDetailsValue = JSON.parse(json);\r\n      const page = 1;\r\n      this.accountService.getWatchList(accountDetailsValue.id, page);\r\n      this.props.history.push(`/u/${accountDetailsValue.username}/watchlist`);\r\n    }\r\n  }\r\n\r\n  handleViewProfileClicked = () => {\r\n    const json = localStorage.getItem('accountDetailsKey');\r\n    if (json) {\r\n      const accountDetailsValue = JSON.parse(json);\r\n      this.props.history.push(`/u/${accountDetailsValue.username}`);\r\n    }\r\n  }\r\n\r\n  getInitials = (): string | undefined => {\r\n    const json = localStorage.getItem('accountDetailsKey');\r\n    if (json) {\r\n      const accountDetailsValue = JSON.parse(json);\r\n      let name = accountDetailsValue.name;\r\n      if (!name) {\r\n        let username = accountDetailsValue.username;\r\n        return `${username[0]}`;\r\n      }\r\n      let nameArray = name.join(' ');\r\n      if (nameArray.length === 2) {\r\n        return `${nameArray[0][0]}${nameArray[1][0]}`\r\n      } else {\r\n        return `${nameArray[0][0]}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSearchResultClicked = (event: React.MouseEvent<HTMLDivElement>, data: SearchResultData) => {\r\n    this.setState(initialState);\r\n    this.props.history.push(`/${data.result.category}/${data.result.id}`);\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <>\r\n        <div className=\"header-component\" >\r\n          <div className=\"header-container\">\r\n            <nav className=\"navigation\">\r\n              <img src={logo} className=\"header-logo\" alt=\"logo\" />\r\n              <Link to=\"/\"><span className=\"navigation-link\">Movies</span></Link>\r\n              <Link to=\"/person\"><span className=\"navigation-link\">People</span></Link>\r\n            </nav>\r\n            <div className=\"nav-account\">\r\n              {AuthenticationService.isAuthenticated() ?\r\n                <Popup\r\n                  on='click'\r\n                  position='bottom center'\r\n                  pinned\r\n                  style={{ backgroundColor: '#e0e1e2', }}\r\n                  trigger={\r\n                    <button className=\"header-userIcon\">{this.getInitials()?.toUpperCase()}</button>\r\n                  }>\r\n                  <Popup.Content>\r\n                    <Button fluid link disabled icon='user outline'\r\n                      onClick={this.handleViewProfileClicked}> View profile</Button>\r\n                  </Popup.Content>\r\n                  <Popup.Content>\r\n                    <Button fluid link icon='user outline'\r\n                      onClick={this.handleRatingsClicked}> Ratings</Button>\r\n                  </Popup.Content>\r\n                  <Popup.Content>\r\n                    <Button fluid link icon='user outline'\r\n                      onClick={this.handleWatchlistClicked}> Watchlist</Button>\r\n                  </Popup.Content>\r\n                  <Popup.Content>\r\n                    <Button fluid link disabled icon='user outline' > Favorite</Button>\r\n                  </Popup.Content>\r\n                  <Popup.Content>\r\n                    <Button fluid link icon='user outline' color='blue'\r\n                      onClick={this.handleLogoutClicked} >\r\n                      LogOut\r\n                      </Button>\r\n                  </Popup.Content>\r\n                </Popup>\r\n                :\r\n                <Link to=\"/login\">\r\n                  <div className=\"navigation-link\">Login</div>\r\n                </Link>}\r\n              <div\r\n                onClick={this.handleSearchClicked}\r\n                className=\"header-search__button\">\r\n                <Icon\r\n                  link\r\n                  size='large'\r\n                  color='blue'\r\n                  name={this.state.isSearchOn ? 'close' : 'search'} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div >\r\n          {this.state.isSearchOn ?\r\n            <Search\r\n              category\r\n              input={{ fluid: true }}\r\n              value={this.state.searchState.value}\r\n              icon={\r\n                <Icon\r\n                  name='close'\r\n                  link\r\n                  onClick={this.handleClearSearchClick}\r\n                />}\r\n              fluid={true}\r\n              size='big'\r\n              onResultSelect={this.handleSearchResultClicked}\r\n              onSearchChange={this.handleSearchChange}\r\n              results={this.state.searchState.results}\r\n              loading={this.state.searchState.loading}\r\n              showNoResults\r\n            /> : ''}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\nexport default withRouter(Header);\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\PopularPeoplePage.tsx",["191"],"import React, { Component } from 'react';\r\nimport './popularPeoplePage.css';\r\nimport PopularPeopleService from './../../services/PopularPeopleService';\r\nimport { Grid, Button } from 'semantic-ui-react';\r\nimport { PopularPeoplePageDto } from './../../models/PopularPeople/PopularPeoplePageResponseDto';\r\nimport { Link } from 'react-router-dom';\r\nimport defaultMovie from './../../assets/img/glyphicons-basic-38-picture-grey.svg'\r\nimport { posterUrl } from './../../configuration/configuration';\r\nimport Preloader from './../../components/Preloader/Preloader';\r\ntype PopularPeoplePageProps = {\r\n\r\n}\r\ntype PopularPeoplePageState = {\r\n  page: number;\r\n  persons: Array<PopularPeoplePageDto>;\r\n  total: number;\r\n  loading: boolean;\r\n}\r\nclass PopularPeoplePage extends Component<PopularPeoplePageProps, PopularPeoplePageState> {\r\n  popularPeopleService: PopularPeopleService;\r\n  constructor(props: PopularPeoplePageProps) {\r\n    super(props);\r\n    this.popularPeopleService = new PopularPeopleService();\r\n    this.state = {\r\n      page: 1,\r\n      persons: [],\r\n      total: 0,\r\n      loading: false,\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.updatePersons();\r\n  }\r\n\r\n  updatePersons = async () => {\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    let searchingPersons = await this.popularPeopleService.findPersons(this.state.page);\r\n    this.setState({\r\n      persons: searchingPersons.results,\r\n      loading: false,\r\n    });\r\n  }\r\n\r\n  handleLoadMoreClicked = async () => {\r\n    const nextPage = this.state.page + 1;\r\n    const searchingPersons = await this.popularPeopleService.findPersons(nextPage);\r\n    const allPersons = this.state.persons.concat(searchingPersons.results);\r\n    this.setState({\r\n      page: nextPage,\r\n      persons: allPersons,\r\n      total: searchingPersons.total_results\r\n    });\r\n  }\r\n\r\n  render = () => {\r\n    if (this.state.loading === true) {\r\n      return (<Preloader />)\r\n    }\r\n    else {\r\n      return (\r\n        <React.Fragment>\r\n          <h3 className=\"personPopular-heading\">Popular people</h3>\r\n          <div className=\"personPopular-container\">\r\n            {this.state.persons.map((person) => (\r\n              <Link to={`/person/${person.id}`}>\r\n                <div key={person.id} className=\"personPopular-card\">\r\n                  <div\r\n                    className=\"personPopular-image\"\r\n                    style={{\r\n                      backgroundImage: person.profile_path ?\r\n                        `url(${posterUrl}/w300${person.profile_path})` :\r\n                        `url(${defaultMovie})`\r\n                    }}\r\n                  ></div>\r\n                  <div className=\"personPopular-inform\">\r\n                    <div className=\"personPopular-name\">{person.name}</div>\r\n                    <div className=\"personPopular-popularFor\">\r\n                      <p className=\"personPopular-popularFor-text\">{person.known_for.map((movie) => (movie.title ? movie.title : movie.name)).join(', ')}</p></div>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            ))}\r\n            <Button\r\n              className='more-people'\r\n              secondary\r\n              fluid\r\n              onClick={this.handleLoadMoreClicked}\r\n            >More popular people</Button>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default PopularPeoplePage;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PopularPeopleService.ts",["192"],"import axios, { AxiosResponse } from 'axios';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nimport { PopularPeoplePageResponseDto } from '../models/PopularPeople/PopularPeoplePageResponseDto';\r\nimport { PopularPeoplePageRequestDto } from './../models/PopularPeople/PopularPeoplePageRequestDto';\r\nclass PopularPeopleService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  findPersons = async (page : number): Promise<PopularPeoplePageResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/person/popular`);\r\n    const request: PopularPeoplePageRequestDto | null = this.createRequest(page);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<PopularPeoplePageResponseDto> = await axios.get<PopularPeoplePageResponseDto>(url);\r\n    return response.data;\r\n  }\r\n  createRequest = (page: number): PopularPeoplePageRequestDto => {\r\n    const request: PopularPeoplePageRequestDto = {\r\n      page: page,\r\n    }\r\n    return request;\r\n  }\r\n}\r\nexport default PopularPeopleService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\SearchService.ts",["193","194"],"import axios, { AxiosResponse } from 'axios';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nimport { PopularPeoplePageResponseDto } from '../models/PopularPeople/PopularPeoplePageResponseDto';\r\nimport { PopularPeoplePageRequestDto } from './../models/PopularPeople/PopularPeoplePageRequestDto';\r\nimport { SearchResponseDto } from '../models/SearchResponseDto';\r\nimport { SearchRequestDto } from './../models/SearchRequestDto';\r\nimport { SearchResult } from './../models/SearchResponseDto';\r\n\r\nclass SearchService extends TmdbBaseService {\r\n\r\n  public findSearchResults = async (querySearch: string): Promise<SearchResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/search/multi`);\r\n    const request: SearchRequestDto | null = this.createRequest(querySearch);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<SearchResponseDto> = await axios.get<SearchResponseDto>(url);\r\n    response.data.results = response.data.results.filter((item: SearchResult) =>\r\n    item.media_type === 'movie' || item.media_type === 'person');\r\n    return response.data;\r\n  }\r\n\r\n  private createRequest = (querySearch: string): SearchRequestDto => {\r\n    const request: SearchRequestDto = {\r\n      query: querySearch,\r\n      page: 1,\r\n    }\r\n    return request;\r\n  }\r\n\r\n}\r\n\r\nexport default SearchService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AccountService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserWatchlistPage\\UserWatchlistPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserWatchlistPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserRatingsPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserRatingsPage\\UserRatingsPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\UserProfilePage\\UserProfilePage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\ProfileMoviesCard\\ProfileMoviesCard.tsx",["195","196"],"import React, { Component } from 'react';\r\nimport defaultMovie from './../../assets/img/glyphicons-basic-38-picture-grey.svg';\r\nimport { posterUrl } from './../../configuration/configuration';\r\nimport './profileMoviesCard.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { RatingDto } from './../../models/Account/RatingResponseDto';\r\n\r\ntype ProfileMoviesCardProps = {\r\n  movie: RatingDto;\r\n}\r\n\r\nexport default function ProfileMoviesCard(props: ProfileMoviesCardProps) {\r\n  const { movie } = props;\r\n  const dateFormatter = new Intl.DateTimeFormat(\"ru\");\r\n  return (\r\n    <>\r\n      {/* <Icon name='heart' color='red' size='large' link className='movieCard-like' />\r\n      <Icon name=\"bookmark\" color='red' size='large' link className='movieCard-watchList' /> */}\r\n      <Link to={`/movies/${movie.id}`}>\r\n        <div className=\"profileMovies-container\" key={movie.id}>\r\n          <img\r\n            className='profileMovies-poster'\r\n            src={`${posterUrl}/w185/${movie.poster_path}`}\r\n            onError={(e: any) => {\r\n              if (e.target.src !== defaultMovie) {\r\n                e.target.src = defaultMovie;\r\n              }\r\n            }}\r\n            alt=\"poster\" />\r\n          <div className=\"profileMovies-description\">\r\n            <div className='profileMovies-content'>\r\n              <div className='profileMovies-voting' style={{\r\n                borderColor:\r\n                  movie.vote_average >= 7 ? '#21d07a' :\r\n                    movie.vote_average >= 4 ? '#d2d531' :\r\n                      movie.vote_average > 0 ? '#cb215b' : '#666666'\r\n              }}>{`${movie.vote_average * 10}`}\r\n                <span className=\"percent\">%</span>\r\n              </div>\r\n              <div className=\"profileMovies-title\">\r\n                <div className=\"profileMovies-heading\">{movie.title}</div>\r\n                <div className=\"profileMovies-release\">\r\n                  {movie.release_date ? dateFormatter.format(new Date(movie.release_date)) : ''}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"profileMovies-overview\">\r\n              {movie.overview}\r\n            </div>\r\n            <div className=\"profileMovies-release\">\r\n              {movie.rating ? <><span className=\"profileMovies-rating\">{movie.rating}</span> Your rating</> : ''}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Link >\r\n    </>\r\n  )\r\n}\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Preloader\\Preloader.tsx",[],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":2,"column":8,"nodeType":"203","messageId":"204","endLine":2,"endColumn":12},{"ruleId":"201","severity":1,"message":"205","line":8,"column":3,"nodeType":"203","messageId":"204","endLine":8,"endColumn":11},{"ruleId":"201","severity":1,"message":"206","line":7,"column":18,"nodeType":"203","messageId":"204","endLine":7,"endColumn":22},{"ruleId":"201","severity":1,"message":"207","line":5,"column":24,"nodeType":"203","messageId":"204","endLine":5,"endColumn":32},{"ruleId":"208","severity":1,"message":"209","line":8,"column":3,"nodeType":"210","messageId":"211","endLine":10,"endColumn":4},{"ruleId":"201","severity":1,"message":"206","line":2,"column":10,"nodeType":"203","messageId":"204","endLine":2,"endColumn":14},{"ruleId":"197","replacedBy":"212"},{"ruleId":"199","replacedBy":"213"},{"ruleId":"201","severity":1,"message":"214","line":1,"column":17,"nodeType":"203","messageId":"204","endLine":1,"endColumn":26},{"ruleId":"201","severity":1,"message":"215","line":2,"column":37,"nodeType":"203","messageId":"204","endLine":2,"endColumn":47},{"ruleId":"208","severity":1,"message":"209","line":14,"column":3,"nodeType":"210","messageId":"211","endLine":16,"endColumn":4},{"ruleId":"201","severity":1,"message":"216","line":1,"column":28,"nodeType":"203","messageId":"204","endLine":1,"endColumn":40},{"ruleId":"201","severity":1,"message":"206","line":4,"column":10,"nodeType":"203","messageId":"204","endLine":4,"endColumn":14},{"ruleId":"208","severity":1,"message":"209","line":7,"column":3,"nodeType":"210","messageId":"211","endLine":9,"endColumn":4},{"ruleId":"201","severity":1,"message":"217","line":4,"column":10,"nodeType":"203","messageId":"204","endLine":4,"endColumn":38},{"ruleId":"201","severity":1,"message":"218","line":5,"column":10,"nodeType":"203","messageId":"204","endLine":5,"endColumn":37},{"ruleId":"201","severity":1,"message":"214","line":1,"column":17,"nodeType":"203","messageId":"204","endLine":1,"endColumn":26},{"ruleId":"201","severity":1,"message":"219","line":6,"column":10,"nodeType":"203","messageId":"204","endLine":6,"endColumn":14},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Grid' is defined but never used.","'Checkbox' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["220"],["221"],"'Component' is defined but never used.","'RouteProps' is defined but never used.","'ReactElement' is defined but never used.","'PopularPeoplePageResponseDto' is defined but never used.","'PopularPeoplePageRequestDto' is defined but never used.","'Icon' is defined but never used.","no-global-assign","no-unsafe-negation"]