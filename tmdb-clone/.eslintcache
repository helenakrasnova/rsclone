[{"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx":"1","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts":"2","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx":"3","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts":"4","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx":"5","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts":"6","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx":"7","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts":"8","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts":"9","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts":"10","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx":"11","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx":"12","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx":"13","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts":"14","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts":"15","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts":"16","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts":"17","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts":"18","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts":"19","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx":"20","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx":"21","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts":"22","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts":"23","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx":"24","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx":"25","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx":"26","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts":"27"},{"size":523,"mtime":1610354700949,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":1110,"mtime":1610393827374,"results":"31","hashOfConfig":"29"},{"size":45,"mtime":1610055202984,"results":"32","hashOfConfig":"29"},{"size":3799,"mtime":1610369789027,"results":"33","hashOfConfig":"29"},{"size":34,"mtime":1609855466816,"results":"34","hashOfConfig":"29"},{"size":2135,"mtime":1609858543821,"results":"35","hashOfConfig":"29"},{"size":1798,"mtime":1610054875784,"results":"36","hashOfConfig":"29"},{"size":412,"mtime":1610315232811,"results":"37","hashOfConfig":"29"},{"size":2066,"mtime":1610303235341,"results":"38","hashOfConfig":"29"},{"size":683,"mtime":1610363383076,"results":"39","hashOfConfig":"29"},{"size":783,"mtime":1610289972450,"results":"40","hashOfConfig":"29"},{"size":11835,"mtime":1610385953328,"results":"41","hashOfConfig":"29"},{"size":1069,"mtime":1610291402716,"results":"42","hashOfConfig":"29"},{"size":1056,"mtime":1610129152892,"results":"43","hashOfConfig":"29"},{"size":118,"mtime":1610143118042,"results":"44","hashOfConfig":"29"},{"size":36215,"mtime":1610147753343,"results":"45","hashOfConfig":"29"},{"size":28427,"mtime":1610148957217,"results":"46","hashOfConfig":"29"},{"size":28147,"mtime":1610194707873,"results":"47","hashOfConfig":"29"},{"size":1064,"mtime":1610300285429,"results":"48","hashOfConfig":"29"},{"size":1242,"mtime":1610394473796,"results":"49","hashOfConfig":"29"},{"size":5093,"mtime":1610391805954,"results":"50","hashOfConfig":"29"},{"size":1081,"mtime":1610315598020,"results":"51","hashOfConfig":"29"},{"size":1017,"mtime":1610355685642,"results":"52","hashOfConfig":"29"},{"size":443,"mtime":1610356118670,"results":"53","hashOfConfig":"29"},{"size":1039,"mtime":1610394492415,"results":"54","hashOfConfig":"29"},{"size":3211,"mtime":1610393497998,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"z8dq48",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx",[],["115","116"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx",["117","118"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport MoviesListPage from './features/MoviesListPage';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Login from './features/Login';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport MovieDetails from './features/MovieDetails/MovieDetails';\r\nimport Header from './components/Header/Header';\r\nimport Footer from './components/Footer/Footer';\r\nimport PersonPage from './features/PersonPage/PersonPage';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={MoviesListPage} />\r\n          <Route exact path=\"/movies/:id\" component={MovieDetails} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/person/:id\" component={PersonPage} />\r\n          {/* <Route path=\"*\" component={NotFound} /> */}\r\n        </Switch>\r\n      </Router>\r\n      <Footer />\r\n      {/* <Error /> */}\r\n      {/* <TestTask/> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx",["119"],"import React, { Component } from \"react\";\r\nimport DiscoverMoviesService from './../../services/DiscoverMoviesService';\r\nimport { MovieDiscoverDto } from './../../models/MovieDiscoverDto';\r\n// import SearchMovies from './SearchMovies';\r\n// import MoviesOrdering from './MoviesOrdering';\r\nimport MoviesList from './MoviesList/MoviesList';\r\nimport MoviesOrdering from './MoviesOrdering/MoviesOrdering';\r\nimport SearchMovies, { SearchMoviesState } from './SearchMovies/SearchMovies';\r\nimport { Button, Container, Grid } from 'semantic-ui-react';\r\nimport './moviesListPage.css';\r\n\r\n\r\ntype MoviesListPageProps = {\r\n\r\n}\r\ntype MoviesListPageState = {\r\n  movies: Array<MovieDiscoverDto>;\r\n  total: number;\r\n  filter: SearchMoviesState;\r\n  orderBy: string;\r\n  page: number;\r\n}\r\nclass MoviesListPage extends Component<MoviesListPageProps, MoviesListPageState>{\r\n  discoverMoviesService: DiscoverMoviesService;\r\n  constructor(props: MoviesListPageProps) {\r\n    super(props);\r\n    this.discoverMoviesService = new DiscoverMoviesService();\r\n    this.state = {\r\n      movies: [],\r\n      total: 0,\r\n      filter: {\r\n        activeIndex: 0,\r\n        isAllReleases: true,\r\n        releaseTypes: new Set([1, 2, 3, 4, 5, 6]),\r\n        isAllCountries: true,\r\n        releaseCountry: null,\r\n        certification: new Set([]),\r\n        selectedLanguage: null,\r\n        voteAverageMin: 0,\r\n        voteAverageMax: 10,\r\n        voteCountMin: 0,\r\n        movieDurationMin: 0,\r\n        movieDurationMax: 400,\r\n        releaseDateFrom: '',\r\n        releaseDateTo: '',\r\n        genres: new Set([]),\r\n      },\r\n      orderBy: 'popularity.desc',\r\n      page: 1,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.updateMovies(this.state.filter);\r\n  }\r\n\r\n  updateMovies = async (filter: SearchMoviesState) => {\r\n    let searchingMovies = await this.discoverMoviesService.findMovies(this.state.filter, this.state.orderBy, this.state.page);\r\n    this.setState({\r\n      movies: searchingMovies.results,\r\n      total: searchingMovies.total_results,\r\n      filter: filter,\r\n      page: 1,\r\n    });\r\n  }\r\n  handleSearchClicked = async (filter: SearchMoviesState) => {\r\n    await this.updateMovies(filter);\r\n  }\r\n  handleOrderChanged = (value: string) => {\r\n    this.setState({\r\n      orderBy: value,\r\n    });\r\n  }\r\n  handleLoadMoreClicked = async () => {\r\n    const nextPage = this.state.page + 1;\r\n    debugger\r\n    const searchingMovies = await this.discoverMoviesService.findMovies(this.state.filter, this.state.orderBy, nextPage);\r\n    const allMovies = this.state.movies.concat(searchingMovies.results);\r\n    this.setState({\r\n      page: nextPage,\r\n      movies: allMovies,\r\n      total: searchingMovies.total_results,\r\n    });\r\n  }\r\n  render = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <Grid columns={2}>\r\n            <Grid.Column width={4}>\r\n              <MoviesOrdering\r\n                onOrderChanged={this.handleOrderChanged}\r\n                selectedValue={this.state.orderBy}\r\n              // onSortByChanged={this.handleSortByChanged}\r\n              // onSortOrderChanged={this.handleSortOrderChanged}\r\n              />\r\n              <SearchMovies\r\n                onSearchClicked={this.handleSearchClicked}\r\n                initialFilter={this.state.filter}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={12}>\r\n              <MoviesList\r\n                movies={this.state.movies} />\r\n              <Button\r\n                className='load-more'\r\n                secondary\r\n                fluid\r\n                onClick={this.handleLoadMoreClicked}\r\n              >Load more</Button>\r\n            </Grid.Column>\r\n\r\n          </Grid>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default MoviesListPage;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts",["120"],"import axios, { AxiosResponse } from 'axios';\r\nimport { SearchMoviesState } from '../features/MoviesListPage/SearchMovies/SearchMovies';\r\nimport { DiscoverMoviesFilterRequestDto } from '../models/DiscoverMoviesFilterRequestDto';\r\nimport { DiscoverResponseDto } from '../models/DiscoverResponseDto';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nclass DiscoverMoviesService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  findMovies = async (filter: SearchMoviesState | null, orderBy: string, page: number): Promise<DiscoverResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/discover/movie`);\r\n    const request: DiscoverMoviesFilterRequestDto | null = this.createRequest(filter, orderBy, page);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<DiscoverResponseDto> = await axios.get<DiscoverResponseDto>(url);\r\n    return response.data;\r\n  }\r\n  createRequest = (filter: SearchMoviesState | null, orderBy: string, page: number): DiscoverMoviesFilterRequestDto | null => {\r\n    if (!filter) {\r\n      return null;\r\n    }\r\n    const request: DiscoverMoviesFilterRequestDto = {\r\n      page: page,\r\n      sort_by: orderBy,\r\n      \"release_date.gte\": filter.releaseDateFrom,\r\n      \"release_date.lte\": filter.releaseDateFrom,\r\n      with_release_type: Array.from(filter.releaseTypes).join('|'),\r\n      region: filter.releaseCountry,\r\n      with_genres: Array.from(filter.genres).join(','),\r\n      certification: Array.from(filter.certification).join('|'),\r\n      with_original_language: filter.selectedLanguage,\r\n      \"vote_average.gte\": filter.voteAverageMin,\r\n      \"vote_average.lte\": filter.voteAverageMax,\r\n      \"vote_count.gte\": filter.voteCountMin,\r\n      \"with_runtime.gte\": filter.movieDurationMin,\r\n      \"with_runtime.lte\": filter.movieDurationMax,\r\n    }\r\n    return request;\r\n  }\r\n}\r\nexport default DiscoverMoviesService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts",["121"],"import TmdbBaseService from './TmdbBaseService';\r\nimport { MovieDetailsViewModel } from '../models/MovieDetails/ViewModels/MovieDetailsViewModel';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { MovieDetailsResponseDto } from '../models/MovieDetails/Dtos/MovieDetailsResponseDto';\r\nimport { MovieCastViewModel } from './../models/MovieDetails/ViewModels/MovieCastViewModel';\r\nimport { MovieCastResponseDto } from './../models/MovieDetails/Dtos/MovieCastResponseDto';\r\nimport { MovieReviewResponseDto } from './../models/MovieDetails/Dtos/MovieReviewResponseDto';\r\nimport { MovieRecommendationsResponseDto } from '../models/MovieDetails/Dtos/MovieRecommendationsResponseDto';\r\nimport { MovieRecommendationsViewModel } from './../models/MovieDetails/ViewModels/MovieRecommendationsViewModel';\r\nimport { MovieKeywordsResponseDto } from '../models/MovieDetails/Dtos/MovieKeywordsResponseDto';\r\nimport { MovieVideosResponseDto } from '../models/MovieDetails/Dtos/MovieVideosResponseDto';\r\n\r\nclass MovieDetailsService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public getMovie = async (id: string): Promise<MovieDetailsViewModel> => {\r\n    let movieDetails = await this.getDetails(id);\r\n    let movieItems = await Promise.all([\r\n      this.getCast(id),\r\n      this.getReviews(id),\r\n      this.getRecommendations(id),\r\n      this.getKeywords(id),\r\n      this.getVideos(id)\r\n    ]);\r\n    movieDetails.cast = movieItems[0];\r\n    movieDetails.reviews = movieItems[1];\r\n    movieDetails.recommendations = movieItems[2];\r\n    movieDetails.keywords = movieItems[3];\r\n    movieDetails.videos = movieItems[4];\r\n    return movieDetails;\r\n  }\r\n\r\n  private getDetails = async (id: string): Promise<MovieDetailsViewModel> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}`);\r\n    const detailsResponse: AxiosResponse<MovieDetailsResponseDto> = await axios.get<MovieDetailsResponseDto>(url);\r\n    let result: MovieDetailsViewModel = {\r\n      backdrop_path: detailsResponse.data.backdrop_path,\r\n      budget: detailsResponse.data.budget,\r\n      genres: detailsResponse.data.genres,\r\n      homepage: detailsResponse.data.homepage,\r\n      id: detailsResponse.data.id,\r\n      original_language: detailsResponse.data.original_language,\r\n      original_title: detailsResponse.data.original_title,\r\n      overview: detailsResponse.data.overview,\r\n      poster_path: detailsResponse.data.poster_path,\r\n      release_date: detailsResponse.data.release_date,\r\n      revenue: detailsResponse.data.revenue,\r\n      runtime: detailsResponse.data.runtime,\r\n      status: detailsResponse.data.status,\r\n      tagline: detailsResponse.data.tagline,\r\n      title: detailsResponse.data.title,\r\n      video: detailsResponse.data.video,\r\n      vote_average: detailsResponse.data.vote_average,\r\n      vote_count: detailsResponse.data.vote_count,\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getCast = async (id: string): Promise<MovieCastViewModel[]> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/credits`);\r\n    const detailsResponse: AxiosResponse<MovieCastResponseDto> = await axios.get<MovieCastResponseDto>(url);\r\n    let result: Array<MovieCastViewModel> = detailsResponse.data.cast.map((item) => {\r\n      return {\r\n        id: item.id,\r\n        name: item.name,\r\n        profile_path: item.profile_path,\r\n        cast_id: item.cast_id,\r\n        character: item.character,\r\n        order: item.order,\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private getReviews = async (id: string): Promise<MovieReviewResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/reviews`);\r\n    const detailsResponse: AxiosResponse<MovieReviewResponseDto> = await axios.get<MovieReviewResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n\r\n  private getRecommendations = async (id: string): Promise<MovieRecommendationsViewModel[]> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/recommendations`);\r\n    const detailsResponse: AxiosResponse<MovieRecommendationsResponseDto> = await axios.get<MovieRecommendationsResponseDto>(url);\r\n    let result: Array<MovieRecommendationsViewModel> = detailsResponse.data.results.map((item) => {\r\n      return {\r\n        poster_path: item.poster_path,\r\n        title: item.title,\r\n        id: item.id,\r\n        vote_count: item.vote_count,\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  private getKeywords = async (id: string): Promise<MovieKeywordsResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/keywords`);\r\n    const detailsResponse: AxiosResponse<MovieKeywordsResponseDto> = await axios.get<MovieKeywordsResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n  private getVideos = async (id: string): Promise<MovieVideosResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/videos`);\r\n    const detailsResponse: AxiosResponse<MovieVideosResponseDto> = await axios.get<MovieVideosResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n}\r\nexport default MovieDetailsService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts",["122"],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":2,"column":8,"nodeType":"129","messageId":"130","endLine":2,"endColumn":12},{"ruleId":"127","severity":1,"message":"131","line":8,"column":3,"nodeType":"129","messageId":"130","endLine":8,"endColumn":11},{"ruleId":"127","severity":1,"message":"132","line":9,"column":18,"nodeType":"129","messageId":"130","endLine":9,"endColumn":27},{"ruleId":"133","severity":1,"message":"134","line":8,"column":3,"nodeType":"135","messageId":"136","endLine":10,"endColumn":4},{"ruleId":"133","severity":1,"message":"134","line":14,"column":3,"nodeType":"135","messageId":"136","endLine":16,"endColumn":4},{"ruleId":"133","severity":1,"message":"134","line":11,"column":3,"nodeType":"135","messageId":"136","endLine":13,"endColumn":4},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Container' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]