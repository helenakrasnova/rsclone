[{"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx":"1","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts":"2","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx":"3","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts":"4","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx":"5","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts":"6","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx":"7","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts":"8","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts":"9","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts":"10","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx":"11","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx":"12","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx":"13","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts":"14","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts":"15","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts":"16","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts":"17","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts":"18","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts":"19","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx":"20","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx":"21","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts":"22","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts":"23","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx":"24","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx":"25","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx":"26","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts":"27","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\index.ts":"28","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\index.ts":"29","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\PopularPeoplePage.tsx":"30","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PopularPeopleService.ts":"31","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\SearchService.ts":"32"},{"size":523,"mtime":1610354700949,"results":"33","hashOfConfig":"34"},{"size":425,"mtime":499162500000,"results":"35","hashOfConfig":"34"},{"size":1246,"mtime":1610724361950,"results":"36","hashOfConfig":"34"},{"size":45,"mtime":1610055202984,"results":"37","hashOfConfig":"34"},{"size":3797,"mtime":1611050626803,"results":"38","hashOfConfig":"34"},{"size":34,"mtime":1609855466816,"results":"39","hashOfConfig":"34"},{"size":2135,"mtime":1609858543821,"results":"40","hashOfConfig":"34"},{"size":1946,"mtime":1611084659471,"results":"41","hashOfConfig":"34"},{"size":412,"mtime":1610315232811,"results":"42","hashOfConfig":"34"},{"size":2066,"mtime":1610303235341,"results":"43","hashOfConfig":"34"},{"size":699,"mtime":1611050948229,"results":"44","hashOfConfig":"34"},{"size":783,"mtime":1610289972450,"results":"45","hashOfConfig":"34"},{"size":11835,"mtime":1610385953328,"results":"46","hashOfConfig":"34"},{"size":1069,"mtime":1610291402716,"results":"47","hashOfConfig":"34"},{"size":1056,"mtime":1610129152892,"results":"48","hashOfConfig":"34"},{"size":118,"mtime":1610143118042,"results":"49","hashOfConfig":"34"},{"size":36215,"mtime":1610147753343,"results":"50","hashOfConfig":"34"},{"size":28427,"mtime":1610148957217,"results":"51","hashOfConfig":"34"},{"size":28147,"mtime":1610194707873,"results":"52","hashOfConfig":"34"},{"size":1736,"mtime":1611058229906,"results":"53","hashOfConfig":"34"},{"size":8343,"mtime":1611084967486,"results":"54","hashOfConfig":"34"},{"size":5107,"mtime":1611067978761,"results":"55","hashOfConfig":"34"},{"size":1081,"mtime":1610315598020,"results":"56","hashOfConfig":"34"},{"size":3454,"mtime":1611047672867,"results":"57","hashOfConfig":"34"},{"size":2705,"mtime":1610451225211,"results":"58","hashOfConfig":"34"},{"size":4601,"mtime":1611068403018,"results":"59","hashOfConfig":"34"},{"size":3292,"mtime":1611068156502,"results":"60","hashOfConfig":"34"},{"size":43,"mtime":1610355429685,"results":"61","hashOfConfig":"34"},{"size":52,"mtime":1610724377170,"results":"62","hashOfConfig":"34"},{"size":2724,"mtime":1610740574588,"results":"63","hashOfConfig":"34"},{"size":1199,"mtime":1610728359054,"results":"64","hashOfConfig":"34"},{"size":1312,"mtime":1610833893629,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"z8dq48",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"68"},"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx",[],["140","141"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx",["142","143"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport MoviesListPage from './features/MoviesListPage';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Login from './features/Login';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport MovieDetails from './features/MovieDetails/MovieDetails';\r\nimport Header from './components/Header/Header';\r\nimport Footer from './components/Footer/Footer';\r\nimport PersonPage from './features/PersonPage/PersonPage';\r\nimport PopularPeoplePage from './features/PopularPeoplePage';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={MoviesListPage} />\r\n          <Route exact path=\"/movies/:id\" component={MovieDetails} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/person/:id\" component={PersonPage} />\r\n          <Route exact path=\"/person/\" component={PopularPeoplePage} />\r\n          {/* <Route path=\"*\" component={NotFound} /> */}\r\n        </Switch>\r\n      </Router>\r\n      <Footer />\r\n      {/* <Error /> */}\r\n      {/* <TestTask/> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts",["144"],"import axios, { AxiosResponse } from 'axios';\r\nimport { SearchMoviesState } from '../features/MoviesListPage/SearchMovies/SearchMovies';\r\nimport { DiscoverMoviesFilterRequestDto } from '../models/DiscoverMoviesFilterRequestDto';\r\nimport { DiscoverResponseDto } from '../models/DiscoverResponseDto';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nclass DiscoverMoviesService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  findMovies = async (filter: SearchMoviesState | null, orderBy: string, page: number): Promise<DiscoverResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/discover/movie`);\r\n    const request: DiscoverMoviesFilterRequestDto | null = this.createRequest(filter, orderBy, page);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<DiscoverResponseDto> = await axios.get<DiscoverResponseDto>(url);\r\n    return response.data;\r\n  }\r\n  createRequest = (filter: SearchMoviesState | null, orderBy: string, page: number): DiscoverMoviesFilterRequestDto | null => {\r\n    if (!filter) {\r\n      return null;\r\n    }\r\n    const request: DiscoverMoviesFilterRequestDto = {\r\n      page: page,\r\n      sort_by: orderBy,\r\n      \"release_date.gte\": filter.releaseDateFrom,\r\n      \"release_date.lte\": filter.releaseDateFrom,\r\n      with_release_type: Array.from(filter.releaseTypes).join('|'),\r\n      region: filter.releaseCountry,\r\n      with_genres: Array.from(filter.genres).join(','),\r\n      certification: Array.from(filter.certification).join('|'),\r\n      with_original_language: filter.selectedLanguage,\r\n      \"vote_average.gte\": filter.voteAverageMin,\r\n      \"vote_average.lte\": filter.voteAverageMax,\r\n      \"vote_count.gte\": filter.voteCountMin,\r\n      \"with_runtime.gte\": filter.movieDurationMin,\r\n      \"with_runtime.lte\": filter.movieDurationMax,\r\n    }\r\n    return request;\r\n  }\r\n}\r\nexport default DiscoverMoviesService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx",["145"],"import React, { Component } from 'react';\r\nimport { posterUrl } from '../../../configuration/configuration';\r\nimport defaultMovie from '../../../assets/img/glyphicons-basic-38-picture-grey.svg';\r\nimport { MovieDiscoverDto } from './../../../models/MovieDiscoverDto';\r\nimport './moviesCard.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Icon } from 'semantic-ui-react';\r\ntype MoviesCardProps = {\r\n  movie: MovieDiscoverDto\r\n}\r\nexport default function MoviesCard(props: MoviesCardProps) {\r\n  const { movie } = props;\r\n  return (\r\n    <>\r\n      <Icon name='heart' color='red' size='large' link  className='movieCard-like' />\r\n      <Icon name=\"bookmark\" color='red' size='large' link className='movieCard-watchList' />\r\n      <Link to={`/movies/${movie.id}`}>\r\n        <div className=\"film-container\" key={movie.id}>\r\n          <img\r\n            className='film-image'\r\n            src={`${posterUrl}/w300/${movie.poster_path}`}\r\n            onError={(e: any) => {\r\n              if (e.target.src !== defaultMovie) {\r\n                e.target.src = defaultMovie;\r\n              }\r\n            }}\r\n            alt=\"movieImage\" />\r\n          <div className='film-voting' style={{\r\n            borderColor:\r\n              movie.vote_average >= 7 ? '#21d07a' :\r\n                movie.vote_average >= 4 ? '#d2d531' :\r\n                  movie.vote_average > 0 ? '#cb215b' : '#666666'\r\n          }}>{`${movie.vote_average * 10}`}\r\n            <span className=\"percent\">%</span>\r\n          </div>\r\n          <div className=\"film-heading\">\r\n            {movie.title}\r\n            <div className=\"film-release\">\r\n              {movie.release_date}\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </Link >\r\n    </>\r\n  )\r\n}\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx",["146","147"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts",["148"],"import TmdbBaseService from './TmdbBaseService';\r\nimport { MovieDetailsViewModel } from '../models/MovieDetails/ViewModels/MovieDetailsViewModel';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { MovieDetailsResponseDto } from '../models/MovieDetails/Dtos/MovieDetailsResponseDto';\r\nimport { MovieCastViewModel } from './../models/MovieDetails/ViewModels/MovieCastViewModel';\r\nimport { MovieCastResponseDto } from './../models/MovieDetails/Dtos/MovieCastResponseDto';\r\nimport { MovieReviewResponseDto } from './../models/MovieDetails/Dtos/MovieReviewResponseDto';\r\nimport { MovieRecommendationsResponseDto } from '../models/MovieDetails/Dtos/MovieRecommendationsResponseDto';\r\nimport { MovieRecommendationsViewModel } from './../models/MovieDetails/ViewModels/MovieRecommendationsViewModel';\r\nimport { MovieKeywordsResponseDto } from '../models/MovieDetails/Dtos/MovieKeywordsResponseDto';\r\nimport { MovieVideosResponseDto } from '../models/MovieDetails/Dtos/MovieVideosResponseDto';\r\n\r\nclass MovieDetailsService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public getMovie = async (id: string): Promise<MovieDetailsViewModel> => {\r\n    let movieDetails = await this.getDetails(id);\r\n    let movieItems = await Promise.all([\r\n      this.getCast(id),\r\n      this.getReviews(id),\r\n      this.getRecommendations(id),\r\n      this.getKeywords(id),\r\n      this.getVideos(id)\r\n    ]);\r\n    movieDetails.cast = movieItems[0];\r\n    movieDetails.reviews = movieItems[1];\r\n    movieDetails.recommendations = movieItems[2];\r\n    movieDetails.keywords = movieItems[3];\r\n    movieDetails.videos = movieItems[4];\r\n    return movieDetails;\r\n  }\r\n\r\n  private getDetails = async (id: string): Promise<MovieDetailsViewModel> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}`);\r\n    const detailsResponse: AxiosResponse<MovieDetailsResponseDto> = await axios.get<MovieDetailsResponseDto>(url);\r\n    let result: MovieDetailsViewModel = {\r\n      backdrop_path: detailsResponse.data.backdrop_path,\r\n      budget: detailsResponse.data.budget,\r\n      genres: detailsResponse.data.genres,\r\n      homepage: detailsResponse.data.homepage,\r\n      id: detailsResponse.data.id,\r\n      original_language: detailsResponse.data.original_language,\r\n      original_title: detailsResponse.data.original_title,\r\n      overview: detailsResponse.data.overview,\r\n      poster_path: detailsResponse.data.poster_path,\r\n      release_date: detailsResponse.data.release_date,\r\n      revenue: detailsResponse.data.revenue,\r\n      runtime: detailsResponse.data.runtime,\r\n      status: detailsResponse.data.status,\r\n      tagline: detailsResponse.data.tagline,\r\n      title: detailsResponse.data.title,\r\n      video: detailsResponse.data.video,\r\n      vote_average: detailsResponse.data.vote_average,\r\n      vote_count: detailsResponse.data.vote_count,\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getCast = async (id: string): Promise<MovieCastViewModel[]> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/credits`);\r\n    const detailsResponse: AxiosResponse<MovieCastResponseDto> = await axios.get<MovieCastResponseDto>(url);\r\n    let result: Array<MovieCastViewModel> = detailsResponse.data.cast.map((item) => {\r\n      return {\r\n        id: item.id,\r\n        name: item.name,\r\n        profile_path: item.profile_path,\r\n        cast_id: item.cast_id,\r\n        character: item.character,\r\n        order: item.order,\r\n        \r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private getReviews = async (id: string): Promise<MovieReviewResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/reviews`);\r\n    const detailsResponse: AxiosResponse<MovieReviewResponseDto> = await axios.get<MovieReviewResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n\r\n  private getRecommendations = async (id: string): Promise<MovieRecommendationsViewModel[]> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/recommendations`);\r\n    const detailsResponse: AxiosResponse<MovieRecommendationsResponseDto> = await axios.get<MovieRecommendationsResponseDto>(url);\r\n    let result: Array<MovieRecommendationsViewModel> = detailsResponse.data.results.map((item) => {\r\n      return {\r\n        poster_path: item.poster_path,\r\n        title: item.title,\r\n        id: item.id,\r\n        vote_average: item.vote_average,\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  private getKeywords = async (id: string): Promise<MovieKeywordsResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/keywords`);\r\n    const detailsResponse: AxiosResponse<MovieKeywordsResponseDto> = await axios.get<MovieKeywordsResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n  private getVideos = async (id: string): Promise<MovieVideosResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/videos`);\r\n    const detailsResponse: AxiosResponse<MovieVideosResponseDto> = await axios.get<MovieVideosResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n}\r\nexport default MovieDetailsService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx",["149"],"import React, { Component } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PersonPageService from '../../services/PersonPageService';\r\nimport './personPage.css'\r\nimport { PersonDetailsViewModel } from './../../models/PersonDetails/ViewModels/PersonDetailsViewModel';\r\nimport { Link } from 'react-router-dom';\r\nimport { Table, Icon, Button } from 'semantic-ui-react';\r\ntype PersonPageProps = {\r\n  id: string\r\n}\r\n// type MovieDetailsView = {\r\n//   title: string\r\n// }\r\nclass PersonPage extends Component<PersonPageProps, PersonDetailsViewModel> {\r\n  personPageService: PersonPageService;\r\n  id: string;\r\n  constructor({ match }: RouteComponentProps<PersonPageProps>) {\r\n    super(match.params);\r\n    this.id = match.params.id;\r\n    this.personPageService = new PersonPageService();\r\n    this.state = {\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    const person = await this.personPageService.getPerson(this.id);\r\n    this.setState(person);\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <>\r\n        <div className=\"personInform-container\">\r\n          <div className=\"personInform-firstColumn\">\r\n            <section\r\n              style={{ backgroundImage: `url(https://www.themoviedb.org/t/p/w342${this.state.profile_path})` }}\r\n              className=\"personInform-poster\">\r\n            </section>\r\n            <h3>Personal Info</h3>\r\n            <section className=\"posterInform-facts\">\r\n              <h4>Known For</h4>\r\n              <div>{this.state.known_for_department}</div>\r\n              <h4>Gender</h4>\r\n              <div>{this.state.gender === 2 ? 'Male' : 'Female'}</div>\r\n              <h4>Birthday</h4>\r\n              <div>{this.state.birthday}</div>\r\n              <h4>Place of Birth</h4>\r\n              <div>{this.state.place_of_birth}</div>\r\n              {this.state.deathday ? <h3>Deathday<div>{this.state.deathday}</div></h3> : <div></div>}\r\n              <h4>Also Known As</h4>\r\n              {this.state.also_known_as?.map((item) => (<div>{item}</div>))}\r\n\r\n\r\n\r\n            </section>\r\n          </div>\r\n          <div className=\"personInform-secondColumn\">\r\n            <section className=\"personInform-title\">\r\n              <h1 className='personInform-name'>\r\n                {this.state.name}\r\n                <a href={`https://www.imdb.com/name/${this.state.imdb_id}`}>\r\n                  <Icon name='imdb' link size=\"small\" />\r\n                </a>\r\n              </h1>\r\n            </section>\r\n            <section className=\"personInform-biography\">\r\n              <h3>Biography</h3>\r\n              <div className=\"personInform-biographyText\">{this.state.biography}</div>\r\n            </section>\r\n            <section className=\"personInform-knownFor\">\r\n              <h3>Known For</h3>\r\n              <div>?????????????????????????</div>\r\n            </section>\r\n            <section className=\"personInform-credits\">\r\n              <h3>{this.state.known_for_department}</h3>\r\n              <Table singleLine className=\"personInform-table\">\r\n                {this.state.credits?.cast.map((item) => (\r\n                  <Table.Row>\r\n                    <Table.Cell width={1}>\r\n                      <Link to={`/movies/${item.id}`}>\r\n                        <span className=\"personInform-table\">\r\n                          {item.release_date?.slice(0, 4)}\r\n                        </span>\r\n                      </Link>\r\n                    </Table.Cell>\r\n                    <Table.Cell width={1}>\r\n                      <Link to={`/movies/${item.id}`}>\r\n                        <span className=\"personInform-table\">\r\n                          {item.vote_average * 10}%\r\n                        </span>\r\n                      </Link>\r\n                    </Table.Cell>\r\n                    <Table.Cell width={6}>\r\n                      <Link to={`/movies/${item.id}`}>\r\n                        <span className=\"personInform-table\">\r\n                          <strong>\r\n                            {item.title}\r\n                          </strong>\r\n                        </span>\r\n                      </Link>\r\n                    </Table.Cell>\r\n                    <Table.Cell width={4}>\r\n                      <Link to={`/movies/${item.id}`}>\r\n                        <span className=\"personInform-table\">\r\n                          {item.character}\r\n                        </span>\r\n                      </Link>\r\n                    </Table.Cell>\r\n                  </Table.Row >))}\r\n              </Table >\r\n            </section>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default PersonPage;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts",["150"],"\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport { PersonDetailsViewModel } from './../models/PersonDetails/ViewModels/PersonDetailsViewModel';\r\nimport { PersonDetailsResponseDto } from '../models/PersonDetails/Dtos/PersonDetailsResponseDto';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { PersonCreditsViewModel } from '../models/PersonDetails/ViewModels/PersonCreditsViewModel';\r\nimport { PersonCreditsResponseDto } from './../models/PersonDetails/Dtos/PersonCreditsResponseDto';\r\nimport { PersonImagesResponseDto } from '../models/PersonDetails/Dtos/PersonImagesResponseDto';\r\n\r\nclass PersonPageService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  public getPerson = async (id: string): Promise<PersonDetailsViewModel> => {\r\n    let personDetails = await this.getPersonDetails(id);\r\n    let personDetailsItems = await Promise.all([\r\n      this.getPersonCredits(id),\r\n      this.getPersonImages(id),\r\n    ]);\r\n    personDetails.credits = personDetailsItems[0];\r\n    personDetails.images = personDetailsItems[1];\r\n    return personDetails;\r\n  }\r\n  private getPersonDetails = async (id: string): Promise<PersonDetailsViewModel> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/person/${id}`);\r\n    const detailsResponse: AxiosResponse<PersonDetailsResponseDto> = await axios.get<PersonDetailsResponseDto>(url);\r\n    let result: PersonDetailsViewModel = {\r\n      also_known_as: detailsResponse.data.also_known_as,\r\n      biography: detailsResponse.data.biography,\r\n      birthday: detailsResponse.data.birthday,\r\n      gender: detailsResponse.data.gender,\r\n      id: detailsResponse.data.id,\r\n      known_for_department: detailsResponse.data.known_for_department,\r\n      name: detailsResponse.data.name,\r\n      place_of_birth: detailsResponse.data.place_of_birth,\r\n      profile_path: detailsResponse.data.profile_path,\r\n      deathday: detailsResponse.data.deathday,\r\n      imdb_id: detailsResponse.data.imdb_id\r\n    }\r\n    return result;\r\n  }\r\n  private getPersonCredits = async (id: string): Promise<PersonCreditsViewModel> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/person/${id}/movie_credits`);\r\n    const detailsResponse: AxiosResponse<PersonCreditsResponseDto> = await axios.get<PersonCreditsResponseDto>(url);\r\n    let result: PersonCreditsViewModel = {\r\n      cast: detailsResponse.data.cast.map((item) => ({\r\n        id: item.id,\r\n        title: item.title,\r\n        release_date: item.release_date,\r\n        vote_average: item.vote_average,\r\n        character: item.character,\r\n      })),\r\n      crew: detailsResponse.data.crew.map((item) => ({\r\n        id: item.id,\r\n        title: item.title,\r\n        release_date: item.release_date,\r\n        vote_average: item.vote_average,\r\n      })),\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getPersonImages = async (id: string): Promise<PersonImagesResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/person/${id}/images`);\r\n    const detailsResponse: AxiosResponse<PersonImagesResponseDto> = await axios.get<PersonImagesResponseDto>(url);\r\n    let result: PersonImagesResponseDto = {\r\n      id: detailsResponse.data.id,\r\n      profiles: detailsResponse.data.profiles,\r\n    }\r\n    return result;\r\n  }\r\n}\r\nexport default PersonPageService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\PopularPeoplePage.tsx",["151"],"import React, { Component } from 'react';\r\nimport './popularPeoplePage.css';\r\nimport PopularPeopleService from './../../services/PopularPeopleService';\r\n\r\nimport { Grid, Button } from 'semantic-ui-react';\r\n\r\n\r\nimport { PopularPeoplePageDto } from './../../models/PopularPeople/PopularPeoplePageResponseDto';\r\nimport { Link } from 'react-router-dom';\r\ntype PopularPeoplePageProps = {\r\n\r\n}\r\ntype PopularPeoplePageState = {\r\n  page: number;\r\n  persons: Array<PopularPeoplePageDto>;\r\n  total: number;\r\n}\r\nclass PopularPeoplePage extends Component<PopularPeoplePageProps, PopularPeoplePageState> {\r\n  popularPeopleService: PopularPeopleService;\r\n  constructor(props: PopularPeoplePageProps) {\r\n    super(props);\r\n    this.popularPeopleService = new PopularPeopleService();\r\n    this.state = {\r\n      page: 1,\r\n      persons: [],\r\n      total: 0,\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.updatePersons();\r\n  }\r\n\r\n  updatePersons = async () => {\r\n    let searchingPersons = await this.popularPeopleService.findPersons(this.state.page);\r\n    this.setState({\r\n      persons: searchingPersons.results,\r\n    });\r\n  }\r\n\r\n  handleLoadMoreClicked = async () => {\r\n    const nextPage = this.state.page + 1;\r\n    const searchingPersons = await this.popularPeopleService.findPersons(nextPage);\r\n    const allPersons = this.state.persons.concat(searchingPersons.results);\r\n    this.setState({\r\n      page: nextPage,\r\n      persons: allPersons,\r\n      total: searchingPersons.total_results\r\n    });\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <h3 className=\"personPopular-heading\">Popular people</h3>\r\n        <div className=\"personPopular-container\">\r\n            {this.state.persons.map((person) => (\r\n              <Link to={`/person/${person.id}`}>\r\n                <div key={person.id} className=\"personPopular-card\">\r\n                  <div\r\n                    className=\"personPopular-image\"\r\n                    style={{ backgroundImage: `url(https://www.themoviedb.org/t/p/w300${person.profile_path})` }}\r\n                  ></div>\r\n                  <div className=\"personPopular-inform\">\r\n                    <div className=\"personPopular-name\">{person.name}</div>\r\n                    <div className=\"personPopular-popularFor\">{person.known_for.map((movie) => (<span>{movie.title}</span>))}</div>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            ))}\r\n            <Button\r\n              className='more-people'\r\n              secondary\r\n              fluid\r\n              onClick={this.handleLoadMoreClicked}\r\n            >More popular people</Button>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default PopularPeoplePage;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PopularPeopleService.ts",["152"],"import axios, { AxiosResponse } from 'axios';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nimport { PopularPeoplePageResponseDto } from '../models/PopularPeople/PopularPeoplePageResponseDto';\r\nimport { PopularPeoplePageRequestDto } from './../models/PopularPeople/PopularPeoplePageRequestDto';\r\nclass PopularPeopleService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  findPersons = async (page : number): Promise<PopularPeoplePageResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/person/popular`);\r\n    const request: PopularPeoplePageRequestDto | null = this.createRequest(page);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<PopularPeoplePageResponseDto> = await axios.get<PopularPeoplePageResponseDto>(url);\r\n    return response.data;\r\n  }\r\n  createRequest = (page: number): PopularPeoplePageRequestDto => {\r\n    const request: PopularPeoplePageRequestDto = {\r\n      page: page,\r\n    }\r\n    return request;\r\n  }\r\n}\r\nexport default PopularPeopleService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\SearchService.ts",["153","154","155"],"import axios, { AxiosResponse } from 'axios';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nimport { PopularPeoplePageResponseDto } from '../models/PopularPeople/PopularPeoplePageResponseDto';\r\nimport { PopularPeoplePageRequestDto } from './../models/PopularPeople/PopularPeoplePageRequestDto';\r\nimport { SearchResponseDto } from '../models/SearchResponseDto';\r\nimport { SearchRequestDto } from './../models/SearchRequestDto';\r\n\r\nclass SearchService extends TmdbBaseService {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  findSearchResults = async (querySearch : string): Promise<SearchResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/search/multi`);\r\n    const request: SearchRequestDto | null = this.createRequest(querySearch);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<SearchResponseDto> = await axios.get<SearchResponseDto>(url);\r\n    return response.data;\r\n  }\r\n\r\n  createRequest = (querySearch: string): SearchRequestDto => {\r\n    const request: SearchRequestDto = {\r\n      query: querySearch,\r\n      page: 1,\r\n    }\r\n    return request;\r\n  }\r\n\r\n}\r\n\r\nexport default SearchService;\r\n",{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":2,"column":8,"nodeType":"162","messageId":"163","endLine":2,"endColumn":12},{"ruleId":"160","severity":1,"message":"164","line":8,"column":3,"nodeType":"162","messageId":"163","endLine":8,"endColumn":11},{"ruleId":"165","severity":1,"message":"166","line":8,"column":3,"nodeType":"167","messageId":"168","endLine":10,"endColumn":4},{"ruleId":"160","severity":1,"message":"169","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":26},{"ruleId":"160","severity":1,"message":"170","line":2,"column":16,"nodeType":"162","messageId":"163","endLine":2,"endColumn":34},{"ruleId":"160","severity":1,"message":"171","line":2,"column":57,"nodeType":"162","messageId":"163","endLine":2,"endColumn":67},{"ruleId":"165","severity":1,"message":"166","line":14,"column":3,"nodeType":"167","messageId":"168","endLine":16,"endColumn":4},{"ruleId":"160","severity":1,"message":"172","line":7,"column":23,"nodeType":"162","messageId":"163","endLine":7,"endColumn":29},{"ruleId":"165","severity":1,"message":"166","line":11,"column":3,"nodeType":"167","messageId":"168","endLine":13,"endColumn":4},{"ruleId":"160","severity":1,"message":"173","line":5,"column":10,"nodeType":"162","messageId":"163","endLine":5,"endColumn":14},{"ruleId":"165","severity":1,"message":"166","line":7,"column":3,"nodeType":"167","messageId":"168","endLine":9,"endColumn":4},{"ruleId":"160","severity":1,"message":"174","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":38},{"ruleId":"160","severity":1,"message":"175","line":5,"column":10,"nodeType":"162","messageId":"163","endLine":5,"endColumn":37},{"ruleId":"165","severity":1,"message":"166","line":11,"column":3,"nodeType":"167","messageId":"168","endLine":13,"endColumn":4},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Component' is defined but never used.","'RouteChildrenProps' is defined but never used.","'RouteProps' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'PopularPeoplePageResponseDto' is defined but never used.","'PopularPeoplePageRequestDto' is defined but never used.","no-global-assign","no-unsafe-negation"]