[{"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx":"1","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts":"2","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx":"3","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts":"4","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx":"5","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts":"6","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx":"7","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts":"8","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts":"9","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts":"10","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx":"11","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx":"12","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx":"13","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts":"14","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts":"15","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts":"16","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts":"17","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts":"18","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts":"19","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx":"20","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx":"21","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts":"22","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts":"23","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx":"24","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx":"25","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx":"26","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts":"27","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\index.ts":"28"},{"size":523,"mtime":1610354700949,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":1110,"mtime":1610393827374,"results":"32","hashOfConfig":"30"},{"size":45,"mtime":1610055202984,"results":"33","hashOfConfig":"30"},{"size":3799,"mtime":1610369789027,"results":"34","hashOfConfig":"30"},{"size":34,"mtime":1609855466816,"results":"35","hashOfConfig":"30"},{"size":2135,"mtime":1609858543821,"results":"36","hashOfConfig":"30"},{"size":1798,"mtime":1610054875784,"results":"37","hashOfConfig":"30"},{"size":412,"mtime":1610315232811,"results":"38","hashOfConfig":"30"},{"size":2066,"mtime":1610303235341,"results":"39","hashOfConfig":"30"},{"size":698,"mtime":1610480886880,"results":"40","hashOfConfig":"30"},{"size":783,"mtime":1610289972450,"results":"41","hashOfConfig":"30"},{"size":11835,"mtime":1610385953328,"results":"42","hashOfConfig":"30"},{"size":1069,"mtime":1610291402716,"results":"43","hashOfConfig":"30"},{"size":1056,"mtime":1610129152892,"results":"44","hashOfConfig":"30"},{"size":118,"mtime":1610143118042,"results":"45","hashOfConfig":"30"},{"size":36215,"mtime":1610147753343,"results":"46","hashOfConfig":"30"},{"size":28427,"mtime":1610148957217,"results":"47","hashOfConfig":"30"},{"size":28147,"mtime":1610194707873,"results":"48","hashOfConfig":"30"},{"size":1710,"mtime":1610452162357,"results":"49","hashOfConfig":"30"},{"size":6475,"mtime":1610482442023,"results":"50","hashOfConfig":"30"},{"size":5097,"mtime":1610479082435,"results":"51","hashOfConfig":"30"},{"size":1081,"mtime":1610315598020,"results":"52","hashOfConfig":"30"},{"size":1017,"mtime":1610355685642,"results":"53","hashOfConfig":"30"},{"size":2705,"mtime":1610451225211,"results":"54","hashOfConfig":"30"},{"size":1039,"mtime":1610394492415,"results":"55","hashOfConfig":"30"},{"size":3211,"mtime":1610393497998,"results":"56","hashOfConfig":"30"},{"size":43,"mtime":1610355429685,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"z8dq48",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx",[],["119","120"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx",["121","122"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport MoviesListPage from './features/MoviesListPage';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Login from './features/Login';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport MovieDetails from './features/MovieDetails/MovieDetails';\r\nimport Header from './components/Header/Header';\r\nimport Footer from './components/Footer/Footer';\r\nimport PersonPage from './features/PersonPage/PersonPage';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={MoviesListPage} />\r\n          <Route exact path=\"/movies/:id\" component={MovieDetails} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/person/:id\" component={PersonPage} />\r\n          {/* <Route path=\"*\" component={NotFound} /> */}\r\n        </Switch>\r\n      </Router>\r\n      <Footer />\r\n      {/* <Error /> */}\r\n      {/* <TestTask/> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx",["123"],"import React, { Component } from \"react\";\r\nimport DiscoverMoviesService from './../../services/DiscoverMoviesService';\r\nimport { MovieDiscoverDto } from './../../models/MovieDiscoverDto';\r\n// import SearchMovies from './SearchMovies';\r\n// import MoviesOrdering from './MoviesOrdering';\r\nimport MoviesList from './MoviesList/MoviesList';\r\nimport MoviesOrdering from './MoviesOrdering/MoviesOrdering';\r\nimport SearchMovies, { SearchMoviesState } from './SearchMovies/SearchMovies';\r\nimport { Button, Container, Grid } from 'semantic-ui-react';\r\nimport './moviesListPage.css';\r\n\r\n\r\ntype MoviesListPageProps = {\r\n\r\n}\r\ntype MoviesListPageState = {\r\n  movies: Array<MovieDiscoverDto>;\r\n  total: number;\r\n  filter: SearchMoviesState;\r\n  orderBy: string;\r\n  page: number;\r\n}\r\nclass MoviesListPage extends Component<MoviesListPageProps, MoviesListPageState>{\r\n  discoverMoviesService: DiscoverMoviesService;\r\n  constructor(props: MoviesListPageProps) {\r\n    super(props);\r\n    this.discoverMoviesService = new DiscoverMoviesService();\r\n    this.state = {\r\n      movies: [],\r\n      total: 0,\r\n      filter: {\r\n        activeIndex: 0,\r\n        isAllReleases: true,\r\n        releaseTypes: new Set([1, 2, 3, 4, 5, 6]),\r\n        isAllCountries: true,\r\n        releaseCountry: null,\r\n        certification: new Set([]),\r\n        selectedLanguage: null,\r\n        voteAverageMin: 0,\r\n        voteAverageMax: 10,\r\n        voteCountMin: 0,\r\n        movieDurationMin: 0,\r\n        movieDurationMax: 400,\r\n        releaseDateFrom: '',\r\n        releaseDateTo: '',\r\n        genres: new Set([]),\r\n      },\r\n      orderBy: 'popularity.desc',\r\n      page: 1,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.updateMovies(this.state.filter);\r\n  }\r\n\r\n  updateMovies = async (filter: SearchMoviesState) => {\r\n    let searchingMovies = await this.discoverMoviesService.findMovies(this.state.filter, this.state.orderBy, this.state.page);\r\n    this.setState({\r\n      movies: searchingMovies.results,\r\n      total: searchingMovies.total_results,\r\n      filter: filter,\r\n      page: 1,\r\n    });\r\n  }\r\n  handleSearchClicked = async (filter: SearchMoviesState) => {\r\n    await this.updateMovies(filter);\r\n  }\r\n  handleOrderChanged = (value: string) => {\r\n    this.setState({\r\n      orderBy: value,\r\n    });\r\n  }\r\n  handleLoadMoreClicked = async () => {\r\n    const nextPage = this.state.page + 1;\r\n    debugger\r\n    const searchingMovies = await this.discoverMoviesService.findMovies(this.state.filter, this.state.orderBy, nextPage);\r\n    const allMovies = this.state.movies.concat(searchingMovies.results);\r\n    this.setState({\r\n      page: nextPage,\r\n      movies: allMovies,\r\n      total: searchingMovies.total_results,\r\n    });\r\n  }\r\n  render = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <Grid columns={2}>\r\n            <Grid.Column width={4}>\r\n              <MoviesOrdering\r\n                onOrderChanged={this.handleOrderChanged}\r\n                selectedValue={this.state.orderBy}\r\n              // onSortByChanged={this.handleSortByChanged}\r\n              // onSortOrderChanged={this.handleSortOrderChanged}\r\n              />\r\n              <SearchMovies\r\n                onSearchClicked={this.handleSearchClicked}\r\n                initialFilter={this.state.filter}\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={12}>\r\n              <MoviesList\r\n                movies={this.state.movies} />\r\n              <Button\r\n                className='load-more'\r\n                secondary\r\n                fluid\r\n                onClick={this.handleLoadMoreClicked}\r\n              >Load more</Button>\r\n            </Grid.Column>\r\n\r\n          </Grid>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default MoviesListPage;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts",["124"],"import axios, { AxiosResponse } from 'axios';\r\nimport { SearchMoviesState } from '../features/MoviesListPage/SearchMovies/SearchMovies';\r\nimport { DiscoverMoviesFilterRequestDto } from '../models/DiscoverMoviesFilterRequestDto';\r\nimport { DiscoverResponseDto } from '../models/DiscoverResponseDto';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nclass DiscoverMoviesService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  findMovies = async (filter: SearchMoviesState | null, orderBy: string, page: number): Promise<DiscoverResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/discover/movie`);\r\n    const request: DiscoverMoviesFilterRequestDto | null = this.createRequest(filter, orderBy, page);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<DiscoverResponseDto> = await axios.get<DiscoverResponseDto>(url);\r\n    return response.data;\r\n  }\r\n  createRequest = (filter: SearchMoviesState | null, orderBy: string, page: number): DiscoverMoviesFilterRequestDto | null => {\r\n    if (!filter) {\r\n      return null;\r\n    }\r\n    const request: DiscoverMoviesFilterRequestDto = {\r\n      page: page,\r\n      sort_by: orderBy,\r\n      \"release_date.gte\": filter.releaseDateFrom,\r\n      \"release_date.lte\": filter.releaseDateFrom,\r\n      with_release_type: Array.from(filter.releaseTypes).join('|'),\r\n      region: filter.releaseCountry,\r\n      with_genres: Array.from(filter.genres).join(','),\r\n      certification: Array.from(filter.certification).join('|'),\r\n      with_original_language: filter.selectedLanguage,\r\n      \"vote_average.gte\": filter.voteAverageMin,\r\n      \"vote_average.lte\": filter.voteAverageMax,\r\n      \"vote_count.gte\": filter.voteCountMin,\r\n      \"with_runtime.gte\": filter.movieDurationMin,\r\n      \"with_runtime.lte\": filter.movieDurationMax,\r\n    }\r\n    return request;\r\n  }\r\n}\r\nexport default DiscoverMoviesService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx",["125"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx",["126","127"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts",["128"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts",["129"],"\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport { PersonDetailsViewModel } from './../models/PersonDetails/ViewModels/PersonDetailsViewModel';\r\nimport { PersonDetailsResponseDto } from '../models/PersonDetails/Dtos/PersonDetailsResponseDto';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { PersonCreditsViewModel } from '../models/PersonDetails/ViewModels/PersonCreditsViewModel';\r\nimport { PersonCreditsResponseDto } from './../models/PersonDetails/Dtos/PersonCreditsResponseDto';\r\nimport { PersonImagesResponseDto } from '../models/PersonDetails/Dtos/PersonImagesResponseDto';\r\n\r\nclass PersonPageService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  public getPerson = async (id: string): Promise<PersonDetailsViewModel> => {\r\n    let personDetails = await this.getPersonDetails(id);\r\n    let personDetailsItems = await Promise.all([\r\n      this.getPersonCredits(id),\r\n      this.getPersonImages(id),\r\n    ]);\r\n    personDetails.credits = personDetailsItems[0];\r\n    personDetails.images = personDetailsItems[1];\r\n    return personDetails;\r\n  }\r\n  private getPersonDetails = async (id: string): Promise<PersonDetailsViewModel> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/person/${id}`);\r\n    const detailsResponse: AxiosResponse<PersonDetailsResponseDto> = await axios.get<PersonDetailsResponseDto>(url);\r\n    let result: PersonDetailsViewModel = {\r\n      also_known_as: detailsResponse.data.also_known_as,\r\n      biography: detailsResponse.data.biography,\r\n      birthday: detailsResponse.data.birthday,\r\n      gender: detailsResponse.data.gender,\r\n      id: detailsResponse.data.id,\r\n      known_for_department: detailsResponse.data.known_for_department,\r\n      name: detailsResponse.data.name,\r\n      place_of_birth: detailsResponse.data.place_of_birth,\r\n      profile_path: detailsResponse.data.profile_path,\r\n      deathday: detailsResponse.data.deathday,\r\n    }\r\n    return result;\r\n  }\r\n  private getPersonCredits = async (id: string): Promise<PersonCreditsViewModel> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/person/${id}/movie_credits`);\r\n    const detailsResponse: AxiosResponse<PersonCreditsResponseDto> = await axios.get<PersonCreditsResponseDto>(url);\r\n    let result: PersonCreditsViewModel = {\r\n      cast: detailsResponse.data.cast.map((item) => ({\r\n        id: item.id,\r\n        title: item.title,\r\n        release_date: item.release_date,\r\n        vote_average: item.vote_average,\r\n      })),\r\n      crew: detailsResponse.data.crew.map((item) => ({\r\n        id: item.id,\r\n        title: item.title,\r\n        release_date: item.release_date,\r\n        vote_average: item.vote_average,\r\n      })),\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getPersonImages = async (id: string): Promise<PersonImagesResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/person/${id}/images`);\r\n    const detailsResponse: AxiosResponse<PersonImagesResponseDto> = await axios.get<PersonImagesResponseDto>(url);\r\n    let result: PersonImagesResponseDto = {\r\n      id: detailsResponse.data.id,\r\n      profiles: detailsResponse.data.profiles,\r\n    }\r\n    return result;\r\n  }\r\n}\r\nexport default PersonPageService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\index.ts",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":2,"column":8,"nodeType":"136","messageId":"137","endLine":2,"endColumn":12},{"ruleId":"134","severity":1,"message":"138","line":8,"column":3,"nodeType":"136","messageId":"137","endLine":8,"endColumn":11},{"ruleId":"134","severity":1,"message":"139","line":9,"column":18,"nodeType":"136","messageId":"137","endLine":9,"endColumn":27},{"ruleId":"140","severity":1,"message":"141","line":8,"column":3,"nodeType":"142","messageId":"143","endLine":10,"endColumn":4},{"ruleId":"134","severity":1,"message":"144","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"145","line":2,"column":16,"nodeType":"136","messageId":"137","endLine":2,"endColumn":34},{"ruleId":"134","severity":1,"message":"146","line":2,"column":57,"nodeType":"136","messageId":"137","endLine":2,"endColumn":67},{"ruleId":"140","severity":1,"message":"141","line":14,"column":3,"nodeType":"142","messageId":"143","endLine":16,"endColumn":4},{"ruleId":"140","severity":1,"message":"141","line":11,"column":3,"nodeType":"142","messageId":"143","endLine":13,"endColumn":4},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Container' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Component' is defined but never used.","'RouteChildrenProps' is defined but never used.","'RouteProps' is defined but never used.","no-global-assign","no-unsafe-negation"]