[{"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx":"1","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts":"2","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx":"3","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts":"4","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx":"5","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts":"6","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx":"7","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts":"8","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts":"9","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts":"10","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx":"11","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx":"12","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx":"13","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts":"14","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts":"15","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts":"16","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts":"17","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts":"18","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts":"19","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx":"20","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx":"21","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts":"22","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts":"23","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx":"24","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx":"25","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx":"26","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts":"27","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\index.ts":"28","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\index.ts":"29","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\PopularPeoplePage.tsx":"30","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PopularPeopleService.ts":"31","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\SearchService.ts":"32"},{"size":523,"mtime":1610354700949,"results":"33","hashOfConfig":"34"},{"size":425,"mtime":499162500000,"results":"35","hashOfConfig":"34"},{"size":1246,"mtime":1610724361950,"results":"36","hashOfConfig":"34"},{"size":45,"mtime":1610055202984,"results":"37","hashOfConfig":"34"},{"size":3824,"mtime":1611231353818,"results":"38","hashOfConfig":"34"},{"size":34,"mtime":1609855466816,"results":"39","hashOfConfig":"34"},{"size":2135,"mtime":1609858543821,"results":"40","hashOfConfig":"34"},{"size":2603,"mtime":1611266818363,"results":"41","hashOfConfig":"34"},{"size":412,"mtime":1611151547747,"results":"42","hashOfConfig":"34"},{"size":2066,"mtime":1610303235341,"results":"43","hashOfConfig":"34"},{"size":735,"mtime":1611232110422,"results":"44","hashOfConfig":"34"},{"size":783,"mtime":1610289972450,"results":"45","hashOfConfig":"34"},{"size":11835,"mtime":1610385953328,"results":"46","hashOfConfig":"34"},{"size":1069,"mtime":1610291402716,"results":"47","hashOfConfig":"34"},{"size":1056,"mtime":1610129152892,"results":"48","hashOfConfig":"34"},{"size":118,"mtime":1610143118042,"results":"49","hashOfConfig":"34"},{"size":36215,"mtime":1610147753343,"results":"50","hashOfConfig":"34"},{"size":28427,"mtime":1610148957217,"results":"51","hashOfConfig":"34"},{"size":28147,"mtime":1610194707873,"results":"52","hashOfConfig":"34"},{"size":1736,"mtime":1611058229906,"results":"53","hashOfConfig":"34"},{"size":11218,"mtime":1611263410538,"results":"54","hashOfConfig":"34"},{"size":5107,"mtime":1611067978761,"results":"55","hashOfConfig":"34"},{"size":1081,"mtime":1610315598020,"results":"56","hashOfConfig":"34"},{"size":3463,"mtime":1611261817288,"results":"57","hashOfConfig":"34"},{"size":3134,"mtime":1611242157866,"results":"58","hashOfConfig":"34"},{"size":8019,"mtime":1611263611477,"results":"59","hashOfConfig":"34"},{"size":3734,"mtime":1611262852775,"results":"60","hashOfConfig":"34"},{"size":43,"mtime":1610355429685,"results":"61","hashOfConfig":"34"},{"size":52,"mtime":1610724377170,"results":"62","hashOfConfig":"34"},{"size":2987,"mtime":1611236133450,"results":"63","hashOfConfig":"34"},{"size":1199,"mtime":1610728359054,"results":"64","hashOfConfig":"34"},{"size":1312,"mtime":1610833893629,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"z8dq48",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"68"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\index.tsx",[],["139","140"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\reportWebVitals.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\App.tsx",["141","142"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport MoviesListPage from './features/MoviesListPage';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Login from './features/Login';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport MovieDetails from './features/MovieDetails/MovieDetails';\r\nimport Header from './components/Header/Header';\r\nimport Footer from './components/Footer/Footer';\r\nimport PersonPage from './features/PersonPage/PersonPage';\r\nimport PopularPeoplePage from './features/PopularPeoplePage';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={MoviesListPage} />\r\n          <Route exact path=\"/movies/:id\" component={MovieDetails} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path=\"/person/:id\" component={PersonPage} />\r\n          <Route exact path=\"/person/\" component={PopularPeoplePage} />\r\n          {/* <Route path=\"*\" component={NotFound} /> */}\r\n        </Switch>\r\n      </Router>\r\n      <Footer />\r\n      {/* <Error /> */}\r\n      {/* <TestTask/> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesListPage.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\Login\\Login.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\AuthenticationService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\TmdbBaseService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\DiscoverMoviesService.ts",["143"],"import axios, { AxiosResponse } from 'axios';\r\nimport { SearchMoviesState } from '../features/MoviesListPage/SearchMovies/SearchMovies';\r\nimport { DiscoverMoviesFilterRequestDto } from '../models/DiscoverMoviesFilterRequestDto';\r\nimport { DiscoverResponseDto } from '../models/DiscoverResponseDto';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nclass DiscoverMoviesService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  findMovies = async (filter: SearchMoviesState | null, orderBy: string, page: number): Promise<DiscoverResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/discover/movie`);\r\n    const request: DiscoverMoviesFilterRequestDto | null = this.createRequest(filter, orderBy, page);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<DiscoverResponseDto> = await axios.get<DiscoverResponseDto>(url);\r\n    return response.data;\r\n  }\r\n  createRequest = (filter: SearchMoviesState | null, orderBy: string, page: number): DiscoverMoviesFilterRequestDto | null => {\r\n    if (!filter) {\r\n      return null;\r\n    }\r\n    const request: DiscoverMoviesFilterRequestDto = {\r\n      page: page,\r\n      sort_by: orderBy,\r\n      \"release_date.gte\": filter.releaseDateFrom,\r\n      \"release_date.lte\": filter.releaseDateFrom,\r\n      with_release_type: Array.from(filter.releaseTypes).join('|'),\r\n      region: filter.releaseCountry,\r\n      with_genres: Array.from(filter.genres).join(','),\r\n      certification: Array.from(filter.certification).join('|'),\r\n      with_original_language: filter.selectedLanguage,\r\n      \"vote_average.gte\": filter.voteAverageMin,\r\n      \"vote_average.lte\": filter.voteAverageMax,\r\n      \"vote_count.gte\": filter.voteCountMin,\r\n      \"with_runtime.gte\": filter.movieDurationMin,\r\n      \"with_runtime.lte\": filter.movieDurationMax,\r\n    }\r\n    return request;\r\n  }\r\n}\r\nexport default DiscoverMoviesService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesList\\MoviesList.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesOrdering\\MoviesOrdering.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\SearchMovies\\SearchMovies.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\configuration.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\genres.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\ReleaseTypes.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\countries.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\certification.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\configuration\\languages.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MoviesListPage\\MoviesCard\\MoviesCard.tsx",["144"],"import React, { Component } from 'react';\r\nimport { posterUrl } from '../../../configuration/configuration';\r\nimport defaultMovie from '../../../assets/img/glyphicons-basic-38-picture-grey.svg';\r\nimport { MovieDiscoverDto } from './../../../models/MovieDiscoverDto';\r\nimport './moviesCard.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Icon } from 'semantic-ui-react';\r\ntype MoviesCardProps = {\r\n  movie: MovieDiscoverDto\r\n}\r\nexport default function MoviesCard(props: MoviesCardProps) {\r\n  const { movie } = props;\r\n  return (\r\n    <>\r\n      <Icon name='heart' color='red' size='large' link  className='movieCard-like' />\r\n      <Icon name=\"bookmark\" color='red' size='large' link className='movieCard-watchList' />\r\n      <Link to={`/movies/${movie.id}`}>\r\n        <div className=\"film-container\" key={movie.id}>\r\n          <img\r\n            className='film-image'\r\n            src={`${posterUrl}/w300/${movie.poster_path}`}\r\n            onError={(e: any) => {\r\n              if (e.target.src !== defaultMovie) {\r\n                e.target.src = defaultMovie;\r\n              }\r\n            }}\r\n            alt=\"movieImage\" />\r\n          <div className='film-voting' style={{\r\n            borderColor:\r\n              movie.vote_average >= 7 ? '#21d07a' :\r\n                movie.vote_average >= 4 ? '#d2d531' :\r\n                  movie.vote_average > 0 ? '#cb215b' : '#666666'\r\n          }}>{`${movie.vote_average * 10}`}\r\n            <span className=\"percent\">%</span>\r\n          </div>\r\n          <div className=\"film-heading\">\r\n            {movie.title}\r\n            <div className=\"film-release\">\r\n              {movie.release_date}\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </Link >\r\n    </>\r\n  )\r\n}\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\MovieDetails.tsx",["145","146","147","148","149"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\MovieDetailsService.ts",["150"],"import TmdbBaseService from './TmdbBaseService';\r\nimport { MovieDetailsViewModel } from '../models/MovieDetails/ViewModels/MovieDetailsViewModel';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { MovieDetailsResponseDto } from '../models/MovieDetails/Dtos/MovieDetailsResponseDto';\r\nimport { MovieCastViewModel } from './../models/MovieDetails/ViewModels/MovieCastViewModel';\r\nimport { MovieCastResponseDto } from './../models/MovieDetails/Dtos/MovieCastResponseDto';\r\nimport { MovieReviewResponseDto } from './../models/MovieDetails/Dtos/MovieReviewResponseDto';\r\nimport { MovieRecommendationsResponseDto } from '../models/MovieDetails/Dtos/MovieRecommendationsResponseDto';\r\nimport { MovieRecommendationsViewModel } from './../models/MovieDetails/ViewModels/MovieRecommendationsViewModel';\r\nimport { MovieKeywordsResponseDto } from '../models/MovieDetails/Dtos/MovieKeywordsResponseDto';\r\nimport { MovieVideosResponseDto } from '../models/MovieDetails/Dtos/MovieVideosResponseDto';\r\n\r\nclass MovieDetailsService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public getMovie = async (id: string): Promise<MovieDetailsViewModel> => {\r\n    let movieDetails = await this.getDetails(id);\r\n    let movieItems = await Promise.all([\r\n      this.getCast(id),\r\n      this.getReviews(id),\r\n      this.getRecommendations(id),\r\n      this.getKeywords(id),\r\n      this.getVideos(id)\r\n    ]);\r\n    movieDetails.cast = movieItems[0];\r\n    movieDetails.reviews = movieItems[1];\r\n    movieDetails.recommendations = movieItems[2];\r\n    movieDetails.keywords = movieItems[3];\r\n    movieDetails.videos = movieItems[4];\r\n    return movieDetails;\r\n  }\r\n\r\n  private getDetails = async (id: string): Promise<MovieDetailsViewModel> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}`);\r\n    const detailsResponse: AxiosResponse<MovieDetailsResponseDto> = await axios.get<MovieDetailsResponseDto>(url);\r\n    let result: MovieDetailsViewModel = {\r\n      backdrop_path: detailsResponse.data.backdrop_path,\r\n      budget: detailsResponse.data.budget,\r\n      genres: detailsResponse.data.genres,\r\n      homepage: detailsResponse.data.homepage,\r\n      id: detailsResponse.data.id,\r\n      original_language: detailsResponse.data.original_language,\r\n      original_title: detailsResponse.data.original_title,\r\n      overview: detailsResponse.data.overview,\r\n      poster_path: detailsResponse.data.poster_path,\r\n      release_date: detailsResponse.data.release_date,\r\n      revenue: detailsResponse.data.revenue,\r\n      runtime: detailsResponse.data.runtime,\r\n      status: detailsResponse.data.status,\r\n      tagline: detailsResponse.data.tagline,\r\n      title: detailsResponse.data.title,\r\n      video: detailsResponse.data.video,\r\n      vote_average: detailsResponse.data.vote_average,\r\n      vote_count: detailsResponse.data.vote_count,\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getCast = async (id: string): Promise<MovieCastViewModel[]> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/credits`);\r\n    const detailsResponse: AxiosResponse<MovieCastResponseDto> = await axios.get<MovieCastResponseDto>(url);\r\n    let result: Array<MovieCastViewModel> = detailsResponse.data.cast.map((item) => {\r\n      return {\r\n        id: item.id,\r\n        name: item.name,\r\n        profile_path: item.profile_path,\r\n        cast_id: item.cast_id,\r\n        character: item.character,\r\n        order: item.order,\r\n        \r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private getReviews = async (id: string): Promise<MovieReviewResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/reviews`);\r\n    const detailsResponse: AxiosResponse<MovieReviewResponseDto> = await axios.get<MovieReviewResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n\r\n  private getRecommendations = async (id: string): Promise<MovieRecommendationsViewModel[]> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/recommendations`);\r\n    const detailsResponse: AxiosResponse<MovieRecommendationsResponseDto> = await axios.get<MovieRecommendationsResponseDto>(url);\r\n    let result: Array<MovieRecommendationsViewModel> = detailsResponse.data.results.map((item) => {\r\n      return {\r\n        poster_path: item.poster_path,\r\n        title: item.title,\r\n        id: item.id,\r\n        vote_average: item.vote_average,\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  private getKeywords = async (id: string): Promise<MovieKeywordsResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/keywords`);\r\n    const detailsResponse: AxiosResponse<MovieKeywordsResponseDto> = await axios.get<MovieKeywordsResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n  private getVideos = async (id: string): Promise<MovieVideosResponseDto> => {\r\n    const url: string = this.addApiKey(`${this.baseUrl}/movie/${id}/videos`);\r\n    const detailsResponse: AxiosResponse<MovieVideosResponseDto> = await axios.get<MovieVideosResponseDto>(url);\r\n    return detailsResponse.data;\r\n  }\r\n}\r\nexport default MovieDetailsService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\models\\MovieDetails\\ViewModels\\MovieDetailsViewModel.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Header\\Header.tsx",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\components\\Footer\\Footer.tsx",["151"],"import React from \"react\";\r\nimport './footer.css';\r\nimport logoFooter from '../../assets/img/logo-footer.svg';\r\nimport rsLogo from '../../assets/img/rs_school_js.svg';\r\nimport gitHubLogo from '../../assets/img/GitHub-Mark-64px.png';\r\n// import { Link } from \"react-router-dom\";\r\n// import { withRouter } from \"react-router\";\r\nimport { Icon, Image } from 'semantic-ui-react';\r\n\r\nexport default function Footer() {\r\n\r\n  return (\r\n    <footer className=\"footer\">\r\n      <div className=\"footer-container\">\r\n        <div className=\"footer-content join\">\r\n          <img src={logoFooter} className=\"footer-logo\" alt=\"footer logo\" />\r\n          <a className=\"logged_in\" href=\"/u/helena.trump\">Hi helena.trump!</a>\r\n        </div>\r\n        <div className=\"footer-content\">\r\n          <h3 className=\"footer-heading\">The Basics</h3>\r\n          <ul className=\"footer-list\">\r\n            <li><a href=\"https://www.themoviedb.org/about\">About TMDb</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/about/staying-in-touch\">Contact Us</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/talk\">Support Forums</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/documentation/api\">API</a></li>\r\n            <li><a href=\"https://status.themoviedb.org/\">System Status</a></li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"footer-content\">\r\n          <h3 className=\"footer-heading\">GET INVOLVED</h3>\r\n          <ul className=\"footer-list\">\r\n            <li><a href=\"https://www.themoviedb.org/bible\">Contribution Bible</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/apps\">3rd Party Applications</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/movie/new\">Add New Movie</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/tv/new\">Add New TV Show</a></li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"footer-content\">\r\n          <h3 className=\"footer-heading\">COMMUNITY</h3>\r\n          <ul className=\"footer-list\">\r\n            <li><a href=\"https://www.themoviedb.org/documentation/community/guidelines\">Guidelines</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/discuss\">Discussions</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/leaderboard\">Leaderboard</a></li>\r\n            <li><a href=\"https://twitter.com/themoviedb\">Twitter</a></li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"footer-content\">\r\n          <h3 className=\"footer-heading\">LEGAL</h3>\r\n          <ul className=\"footer-list\">\r\n            <li><a href=\"https://www.themoviedb.org/terms-of-use\">Terms of Use</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/documentation/api/terms-of-use\">API Terms of Use</a></li>\r\n            <li><a href=\"https://www.themoviedb.org/privacy-policy\">Privacy Policy</a></li>\r\n          </ul>\r\n        </div>\r\n        <Image src={rsLogo}\r\n          as='a'\r\n          size='tiny'\r\n          href='https://rs.school/js/'\r\n          />\r\n           <Image src={gitHubLogo}\r\n          as='a'\r\n          size='mini'\r\n          href='https://rs.school/js/'\r\n          />\r\n      </div>\r\n\r\n    </footer>\r\n  );\r\n}\r\n\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PersonPage\\PersonPage.tsx",["152","153"],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PersonPageService.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\MovieDetails\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\index.ts",[],"C:\\GitRepos\\rsclone\\tmdb-clone\\src\\features\\PopularPeoplePage\\PopularPeoplePage.tsx",["154"],"import React, { Component } from 'react';\r\nimport './popularPeoplePage.css';\r\nimport PopularPeopleService from './../../services/PopularPeopleService';\r\nimport { Grid, Button } from 'semantic-ui-react';\r\nimport { PopularPeoplePageDto } from './../../models/PopularPeople/PopularPeoplePageResponseDto';\r\nimport { Link } from 'react-router-dom';\r\nimport defaultMovie from './../../assets/img/glyphicons-basic-38-picture-grey.svg'\r\ntype PopularPeoplePageProps = {\r\n\r\n}\r\ntype PopularPeoplePageState = {\r\n  page: number;\r\n  persons: Array<PopularPeoplePageDto>;\r\n  total: number;\r\n}\r\nclass PopularPeoplePage extends Component<PopularPeoplePageProps, PopularPeoplePageState> {\r\n  popularPeopleService: PopularPeopleService;\r\n  constructor(props: PopularPeoplePageProps) {\r\n    super(props);\r\n    this.popularPeopleService = new PopularPeopleService();\r\n    this.state = {\r\n      page: 1,\r\n      persons: [],\r\n      total: 0,\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.updatePersons();\r\n  }\r\n\r\n  updatePersons = async () => {\r\n    let searchingPersons = await this.popularPeopleService.findPersons(this.state.page);\r\n    this.setState({\r\n      persons: searchingPersons.results,\r\n    });\r\n  }\r\n\r\n  handleLoadMoreClicked = async () => {\r\n    const nextPage = this.state.page + 1;\r\n    const searchingPersons = await this.popularPeopleService.findPersons(nextPage);\r\n    const allPersons = this.state.persons.concat(searchingPersons.results);\r\n    this.setState({\r\n      page: nextPage,\r\n      persons: allPersons,\r\n      total: searchingPersons.total_results\r\n    });\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <h3 className=\"personPopular-heading\">Popular people</h3>\r\n        <div className=\"personPopular-container\">\r\n          {this.state.persons.map((person) => (\r\n            <Link to={`/person/${person.id}`}>\r\n              <div key={person.id} className=\"personPopular-card\">\r\n                <div\r\n                  className=\"personPopular-image\"\r\n                  style={{\r\n                    backgroundImage: person.profile_path ?\r\n                      `url(https://www.themoviedb.org/t/p/w300${person.profile_path})` :\r\n                      `url(${defaultMovie})`\r\n                  }}\r\n                ></div>\r\n                <div className=\"personPopular-inform\">\r\n                  <div className=\"personPopular-name\">{person.name}</div>\r\n                  <div className=\"personPopular-popularFor\">\r\n                    <p className=\"personPopular-popularFor-text\">{person.known_for.map((movie) => (movie.title? movie.title: movie.name)).join(', ')}</p></div>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          ))}\r\n          <Button\r\n            className='more-people'\r\n            secondary\r\n            fluid\r\n            onClick={this.handleLoadMoreClicked}\r\n          >More popular people</Button>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default PopularPeoplePage;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\PopularPeopleService.ts",["155"],"import axios, { AxiosResponse } from 'axios';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nimport { PopularPeoplePageResponseDto } from '../models/PopularPeople/PopularPeoplePageResponseDto';\r\nimport { PopularPeoplePageRequestDto } from './../models/PopularPeople/PopularPeoplePageRequestDto';\r\nclass PopularPeopleService extends TmdbBaseService {\r\n  constructor() {\r\n    super();\r\n  }\r\n  findPersons = async (page : number): Promise<PopularPeoplePageResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/person/popular`);\r\n    const request: PopularPeoplePageRequestDto | null = this.createRequest(page);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<PopularPeoplePageResponseDto> = await axios.get<PopularPeoplePageResponseDto>(url);\r\n    return response.data;\r\n  }\r\n  createRequest = (page: number): PopularPeoplePageRequestDto => {\r\n    const request: PopularPeoplePageRequestDto = {\r\n      page: page,\r\n    }\r\n    return request;\r\n  }\r\n}\r\nexport default PopularPeopleService;\r\n","C:\\GitRepos\\rsclone\\tmdb-clone\\src\\services\\SearchService.ts",["156","157","158"],"import axios, { AxiosResponse } from 'axios';\r\nimport TmdbBaseService from './TmdbBaseService';\r\nimport queryString from 'query-string';\r\nimport { PopularPeoplePageResponseDto } from '../models/PopularPeople/PopularPeoplePageResponseDto';\r\nimport { PopularPeoplePageRequestDto } from './../models/PopularPeople/PopularPeoplePageRequestDto';\r\nimport { SearchResponseDto } from '../models/SearchResponseDto';\r\nimport { SearchRequestDto } from './../models/SearchRequestDto';\r\n\r\nclass SearchService extends TmdbBaseService {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  findSearchResults = async (querySearch : string): Promise<SearchResponseDto> => {\r\n    let url: string = this.addApiKey(`${this.baseUrl}/search/multi`);\r\n    const request: SearchRequestDto | null = this.createRequest(querySearch);\r\n    if (request) {\r\n      let requestString = queryString.stringify(request, { skipNull: true, skipEmptyString: true });\r\n      url += `&${requestString}`;\r\n    }\r\n    let response: AxiosResponse<SearchResponseDto> = await axios.get<SearchResponseDto>(url);\r\n    return response.data;\r\n  }\r\n\r\n  createRequest = (querySearch: string): SearchRequestDto => {\r\n    const request: SearchRequestDto = {\r\n      query: querySearch,\r\n      page: 1,\r\n    }\r\n    return request;\r\n  }\r\n\r\n}\r\n\r\nexport default SearchService;\r\n",{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":12},{"ruleId":"163","severity":1,"message":"167","line":8,"column":3,"nodeType":"165","messageId":"166","endLine":8,"endColumn":11},{"ruleId":"168","severity":1,"message":"169","line":8,"column":3,"nodeType":"170","messageId":"171","endLine":10,"endColumn":4},{"ruleId":"163","severity":1,"message":"172","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":26},{"ruleId":"163","severity":1,"message":"173","line":2,"column":16,"nodeType":"165","messageId":"166","endLine":2,"endColumn":34},{"ruleId":"163","severity":1,"message":"174","line":2,"column":57,"nodeType":"165","messageId":"166","endLine":2,"endColumn":67},{"ruleId":"163","severity":1,"message":"175","line":7,"column":31,"nodeType":"165","messageId":"166","endLine":7,"endColumn":36},{"ruleId":"163","severity":1,"message":"176","line":7,"column":38,"nodeType":"165","messageId":"166","endLine":7,"endColumn":44},{"ruleId":"163","severity":1,"message":"177","line":7,"column":46,"nodeType":"165","messageId":"166","endLine":7,"endColumn":51},{"ruleId":"168","severity":1,"message":"169","line":14,"column":3,"nodeType":"170","messageId":"171","endLine":16,"endColumn":4},{"ruleId":"163","severity":1,"message":"178","line":8,"column":10,"nodeType":"165","messageId":"166","endLine":8,"endColumn":14},{"ruleId":"163","severity":1,"message":"179","line":8,"column":23,"nodeType":"165","messageId":"166","endLine":8,"endColumn":29},{"ruleId":"163","severity":1,"message":"176","line":8,"column":31,"nodeType":"165","messageId":"166","endLine":8,"endColumn":37},{"ruleId":"163","severity":1,"message":"180","line":4,"column":10,"nodeType":"165","messageId":"166","endLine":4,"endColumn":14},{"ruleId":"168","severity":1,"message":"169","line":7,"column":3,"nodeType":"170","messageId":"171","endLine":9,"endColumn":4},{"ruleId":"163","severity":1,"message":"181","line":4,"column":10,"nodeType":"165","messageId":"166","endLine":4,"endColumn":38},{"ruleId":"163","severity":1,"message":"182","line":5,"column":10,"nodeType":"165","messageId":"166","endLine":5,"endColumn":37},{"ruleId":"168","severity":1,"message":"169","line":11,"column":3,"nodeType":"170","messageId":"171","endLine":13,"endColumn":4},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Component' is defined but never used.","'RouteChildrenProps' is defined but never used.","'RouteProps' is defined but never used.","'Table' is defined but never used.","'Header' is defined but never used.","'Image' is defined but never used.","'Icon' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'PopularPeoplePageResponseDto' is defined but never used.","'PopularPeoplePageRequestDto' is defined but never used.","no-global-assign","no-unsafe-negation"]